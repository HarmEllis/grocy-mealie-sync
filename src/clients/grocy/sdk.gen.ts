// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetSystemInfoData, GetSystemInfoResponse, GetSystemDbChangedTimeData, GetSystemDbChangedTimeResponse, GetSystemConfigData, GetSystemConfigResponse, GetSystemConfigError, GetSystemTimeData, GetSystemTimeResponse, GetSystemTimeError, GetSystemLocalizationStringsData, GetSystemLocalizationStringsResponse, PostSystemLogMissingLocalizationData, PostSystemLogMissingLocalizationResponse, PostSystemLogMissingLocalizationError, GetObjectsByEntityData, GetObjectsByEntityResponse, GetObjectsByEntityError, PostObjectsByEntityData, PostObjectsByEntityResponse, PostObjectsByEntityError, DeleteObjectsByEntityByObjectIdData, DeleteObjectsByEntityByObjectIdResponse, DeleteObjectsByEntityByObjectIdError, GetObjectsByEntityByObjectIdData, GetObjectsByEntityByObjectIdResponse, GetObjectsByEntityByObjectIdError, PutObjectsByEntityByObjectIdData, PutObjectsByEntityByObjectIdResponse, PutObjectsByEntityByObjectIdError, GetUserfieldsByEntityByObjectIdData, GetUserfieldsByEntityByObjectIdResponse, GetUserfieldsByEntityByObjectIdError, PutUserfieldsByEntityByObjectIdData, PutUserfieldsByEntityByObjectIdResponse, PutUserfieldsByEntityByObjectIdError, DeleteFilesByGroupByFileNameData, DeleteFilesByGroupByFileNameResponse, DeleteFilesByGroupByFileNameError, GetFilesByGroupByFileNameData, GetFilesByGroupByFileNameResponse, GetFilesByGroupByFileNameError, PutFilesByGroupByFileNameData, PutFilesByGroupByFileNameResponse, PutFilesByGroupByFileNameError, GetUsersData, GetUsersResponse, GetUsersError, PostUsersData, PostUsersResponse, PostUsersError, DeleteUsersByUserIdData, DeleteUsersByUserIdResponse, DeleteUsersByUserIdError, PutUsersByUserIdData, PutUsersByUserIdResponse, PutUsersByUserIdError, GetUsersByUserIdPermissionsData, GetUsersByUserIdPermissionsResponse, GetUsersByUserIdPermissionsError, PostUsersByUserIdPermissionsData, PostUsersByUserIdPermissionsResponse, PostUsersByUserIdPermissionsError, PutUsersByUserIdPermissionsData, PutUsersByUserIdPermissionsResponse, PutUsersByUserIdPermissionsError, GetUserData, GetUserResponse, GetUserError, GetUserSettingsData, GetUserSettingsResponse, GetUserSettingsError, DeleteUserSettingsBySettingKeyData, DeleteUserSettingsBySettingKeyResponse, DeleteUserSettingsBySettingKeyError, GetUserSettingsBySettingKeyData, GetUserSettingsBySettingKeyResponse, GetUserSettingsBySettingKeyError, PutUserSettingsBySettingKeyData, PutUserSettingsBySettingKeyResponse, PutUserSettingsBySettingKeyError, GetStockData, GetStockResponse, GetStockEntryByEntryIdData, GetStockEntryByEntryIdResponse, GetStockEntryByEntryIdError, PutStockEntryByEntryIdData, PutStockEntryByEntryIdResponse, PutStockEntryByEntryIdError, GetStockEntryByEntryIdPrintlabelData, GetStockEntryByEntryIdPrintlabelResponse, GetStockEntryByEntryIdPrintlabelError, GetStockVolatileData, GetStockVolatileResponse, GetStockProductsByProductIdData, GetStockProductsByProductIdResponse, GetStockProductsByProductIdError, GetStockProductsByProductIdLocationsData, GetStockProductsByProductIdLocationsResponse, GetStockProductsByProductIdLocationsError, GetStockProductsByProductIdEntriesData, GetStockProductsByProductIdEntriesResponse, GetStockProductsByProductIdEntriesError, GetStockProductsByProductIdPriceHistoryData, GetStockProductsByProductIdPriceHistoryResponse, GetStockProductsByProductIdPriceHistoryError, PostStockProductsByProductIdAddData, PostStockProductsByProductIdAddResponse, PostStockProductsByProductIdAddError, PostStockProductsByProductIdConsumeData, PostStockProductsByProductIdConsumeResponse, PostStockProductsByProductIdConsumeError, PostStockProductsByProductIdTransferData, PostStockProductsByProductIdTransferResponse, PostStockProductsByProductIdTransferError, PostStockProductsByProductIdInventoryData, PostStockProductsByProductIdInventoryResponse, PostStockProductsByProductIdInventoryError, PostStockProductsByProductIdOpenData, PostStockProductsByProductIdOpenResponse, PostStockProductsByProductIdOpenError, GetStockProductsByProductIdPrintlabelData, GetStockProductsByProductIdPrintlabelResponse, GetStockProductsByProductIdPrintlabelError, PostStockProductsByProductIdToKeepMergeByProductIdToRemoveData, PostStockProductsByProductIdToKeepMergeByProductIdToRemoveResponse, PostStockProductsByProductIdToKeepMergeByProductIdToRemoveError, GetStockProductsByBarcodeByBarcodeData, GetStockProductsByBarcodeByBarcodeResponse, GetStockProductsByBarcodeByBarcodeError, PostStockProductsByBarcodeByBarcodeAddData, PostStockProductsByBarcodeByBarcodeAddResponse, PostStockProductsByBarcodeByBarcodeAddError, PostStockProductsByBarcodeByBarcodeConsumeData, PostStockProductsByBarcodeByBarcodeConsumeResponse, PostStockProductsByBarcodeByBarcodeConsumeError, PostStockProductsByBarcodeByBarcodeTransferData, PostStockProductsByBarcodeByBarcodeTransferResponse, PostStockProductsByBarcodeByBarcodeTransferError, PostStockProductsByBarcodeByBarcodeInventoryData, PostStockProductsByBarcodeByBarcodeInventoryResponse, PostStockProductsByBarcodeByBarcodeInventoryError, PostStockProductsByBarcodeByBarcodeOpenData, PostStockProductsByBarcodeByBarcodeOpenResponse, PostStockProductsByBarcodeByBarcodeOpenError, GetStockLocationsByLocationIdEntriesData, GetStockLocationsByLocationIdEntriesResponse, GetStockLocationsByLocationIdEntriesError, PostStockShoppinglistAddMissingProductsData, PostStockShoppinglistAddMissingProductsResponse, PostStockShoppinglistAddMissingProductsError, PostStockShoppinglistAddOverdueProductsData, PostStockShoppinglistAddOverdueProductsResponse, PostStockShoppinglistAddOverdueProductsError, PostStockShoppinglistAddExpiredProductsData, PostStockShoppinglistAddExpiredProductsResponse, PostStockShoppinglistAddExpiredProductsError, PostStockShoppinglistClearData, PostStockShoppinglistClearResponse, PostStockShoppinglistClearError, PostStockShoppinglistAddProductData, PostStockShoppinglistAddProductResponse, PostStockShoppinglistAddProductError, PostStockShoppinglistRemoveProductData, PostStockShoppinglistRemoveProductResponse, PostStockShoppinglistRemoveProductError, GetStockBookingsByBookingIdData, GetStockBookingsByBookingIdResponse, GetStockBookingsByBookingIdError, PostStockBookingsByBookingIdUndoData, PostStockBookingsByBookingIdUndoResponse, PostStockBookingsByBookingIdUndoError, GetStockTransactionsByTransactionIdData, GetStockTransactionsByTransactionIdResponse, GetStockTransactionsByTransactionIdError, PostStockTransactionsByTransactionIdUndoData, PostStockTransactionsByTransactionIdUndoResponse, PostStockTransactionsByTransactionIdUndoError, GetStockBarcodesExternalLookupByBarcodeData, GetStockBarcodesExternalLookupByBarcodeResponse, GetStockBarcodesExternalLookupByBarcodeError, PostRecipesByRecipeIdAddNotFulfilledProductsToShoppinglistData, PostRecipesByRecipeIdAddNotFulfilledProductsToShoppinglistResponse, GetRecipesByRecipeIdFulfillmentData, GetRecipesByRecipeIdFulfillmentResponse, GetRecipesByRecipeIdFulfillmentError, PostRecipesByRecipeIdConsumeData, PostRecipesByRecipeIdConsumeResponse, PostRecipesByRecipeIdConsumeError, GetRecipesFulfillmentData, GetRecipesFulfillmentResponse, GetRecipesFulfillmentError, PostRecipesByRecipeIdCopyData, PostRecipesByRecipeIdCopyResponse, PostRecipesByRecipeIdCopyError, GetRecipesByRecipeIdPrintlabelData, GetRecipesByRecipeIdPrintlabelResponse, GetRecipesByRecipeIdPrintlabelError, GetChoresData, GetChoresResponse, GetChoresError, GetChoresByChoreIdData, GetChoresByChoreIdResponse, GetChoresByChoreIdError, PostChoresByChoreIdExecuteData, PostChoresByChoreIdExecuteResponse, PostChoresByChoreIdExecuteError, PostChoresExecutionsByExecutionIdUndoData, PostChoresExecutionsByExecutionIdUndoResponse, PostChoresExecutionsByExecutionIdUndoError, PostChoresExecutionsCalculateNextAssignmentsData, PostChoresExecutionsCalculateNextAssignmentsResponse, PostChoresExecutionsCalculateNextAssignmentsError, GetChoresByChoreIdPrintlabelData, GetChoresByChoreIdPrintlabelResponse, GetChoresByChoreIdPrintlabelError, PostChoresByChoreIdToKeepMergeByChoreIdToRemoveData, PostChoresByChoreIdToKeepMergeByChoreIdToRemoveResponse, PostChoresByChoreIdToKeepMergeByChoreIdToRemoveError, GetBatteriesData, GetBatteriesResponse, GetBatteriesError, GetBatteriesByBatteryIdData, GetBatteriesByBatteryIdResponse, GetBatteriesByBatteryIdError, PostBatteriesByBatteryIdChargeData, PostBatteriesByBatteryIdChargeResponse, PostBatteriesByBatteryIdChargeError, PostBatteriesChargeCyclesByChargeCycleIdUndoData, PostBatteriesChargeCyclesByChargeCycleIdUndoResponse, PostBatteriesChargeCyclesByChargeCycleIdUndoError, GetBatteriesByBatteryIdPrintlabelData, GetBatteriesByBatteryIdPrintlabelResponse, GetBatteriesByBatteryIdPrintlabelError, GetTasksData, GetTasksResponse, GetTasksError, PostTasksByTaskIdCompleteData, PostTasksByTaskIdCompleteResponse, PostTasksByTaskIdCompleteError, PostTasksByTaskIdUndoData, PostTasksByTaskIdUndoResponse, PostTasksByTaskIdUndoError, GetCalendarIcalData, GetCalendarIcalResponse, GetCalendarIcalError, GetCalendarIcalSharingLinkData, GetCalendarIcalSharingLinkResponse, GetPrintShoppinglistThermalData, GetPrintShoppinglistThermalResponse, GetPrintShoppinglistThermalError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Returns information about the installed Grocy version, PHP runtime and OS
 */
export const getSystemInfo = <ThrowOnError extends boolean = false>(options?: Options<GetSystemInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSystemInfoResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/system/info',
        ...options
    });
};

/**
 * Returns the time when the database was last changed
 */
export const getSystemDbChangedTime = <ThrowOnError extends boolean = false>(options?: Options<GetSystemDbChangedTimeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSystemDbChangedTimeResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/system/db-changed-time',
        ...options
    });
};

/**
 * Returns all config settings
 */
export const getSystemConfig = <ThrowOnError extends boolean = false>(options?: Options<GetSystemConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSystemConfigResponse, GetSystemConfigError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/system/config',
        ...options
    });
};

/**
 * Returns the current server time
 */
export const getSystemTime = <ThrowOnError extends boolean = false>(options?: Options<GetSystemTimeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSystemTimeResponse, GetSystemTimeError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/system/time',
        ...options
    });
};

/**
 * Returns all localization strings (in the by the user desired language)
 */
export const getSystemLocalizationStrings = <ThrowOnError extends boolean = false>(options?: Options<GetSystemLocalizationStringsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSystemLocalizationStringsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/system/localization-strings',
        ...options
    });
};

/**
 * Logs a missing localization string
 * Only when MODE == 'dev', so should only be called then
 */
export const postSystemLogMissingLocalization = <ThrowOnError extends boolean = false>(options: Options<PostSystemLogMissingLocalizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSystemLogMissingLocalizationResponse, PostSystemLogMissingLocalizationError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/system/log-missing-localization',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns all objects of the given entity
 */
export const getObjectsByEntity = <ThrowOnError extends boolean = false>(options: Options<GetObjectsByEntityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetObjectsByEntityResponse, GetObjectsByEntityError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/objects/{entity}',
        ...options
    });
};

/**
 * Adds a single object of the given entity
 */
export const postObjectsByEntity = <ThrowOnError extends boolean = false>(options: Options<PostObjectsByEntityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostObjectsByEntityResponse, PostObjectsByEntityError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/objects/{entity}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes a single object of the given entity
 */
export const deleteObjectsByEntityByObjectId = <ThrowOnError extends boolean = false>(options: Options<DeleteObjectsByEntityByObjectIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteObjectsByEntityByObjectIdResponse, DeleteObjectsByEntityByObjectIdError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/objects/{entity}/{objectId}',
        ...options
    });
};

/**
 * Returns a single object of the given entity
 */
export const getObjectsByEntityByObjectId = <ThrowOnError extends boolean = false>(options: Options<GetObjectsByEntityByObjectIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetObjectsByEntityByObjectIdResponse, GetObjectsByEntityByObjectIdError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/objects/{entity}/{objectId}',
        ...options
    });
};

/**
 * Edits the given object of the given entity
 */
export const putObjectsByEntityByObjectId = <ThrowOnError extends boolean = false>(options: Options<PutObjectsByEntityByObjectIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutObjectsByEntityByObjectIdResponse, PutObjectsByEntityByObjectIdError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/objects/{entity}/{objectId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns all userfields with their values of the given object of the given entity
 */
export const getUserfieldsByEntityByObjectId = <ThrowOnError extends boolean = false>(options: Options<GetUserfieldsByEntityByObjectIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserfieldsByEntityByObjectIdResponse, GetUserfieldsByEntityByObjectIdError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/userfields/{entity}/{objectId}',
        ...options
    });
};

/**
 * Edits the given userfields of the given object of the given entity
 */
export const putUserfieldsByEntityByObjectId = <ThrowOnError extends boolean = false>(options: Options<PutUserfieldsByEntityByObjectIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutUserfieldsByEntityByObjectIdResponse, PutUserfieldsByEntityByObjectIdError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/userfields/{entity}/{objectId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes the given file
 */
export const deleteFilesByGroupByFileName = <ThrowOnError extends boolean = false>(options: Options<DeleteFilesByGroupByFileNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFilesByGroupByFileNameResponse, DeleteFilesByGroupByFileNameError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/files/{group}/{fileName}',
        ...options
    });
};

/**
 * Serves the given file
 * With proper Content-Type header
 */
export const getFilesByGroupByFileName = <ThrowOnError extends boolean = false>(options: Options<GetFilesByGroupByFileNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFilesByGroupByFileNameResponse, GetFilesByGroupByFileNameError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/files/{group}/{fileName}',
        ...options
    });
};

/**
 * Uploads a single file
 * The file will be stored at /data/storage/{group}/{file_name} (you need to remember the group and file name to get or delete it again)
 */
export const putFilesByGroupByFileName = <ThrowOnError extends boolean = false>(options: Options<PutFilesByGroupByFileNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutFilesByGroupByFileNameResponse, PutFilesByGroupByFileNameError, ThrowOnError>({
        bodySerializer: null,
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/files/{group}/{fileName}',
        ...options,
        headers: {
            'Content-Type': 'application/octet-stream',
            ...options?.headers
        }
    });
};

/**
 * Returns all users
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponse, GetUsersError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/users',
        ...options
    });
};

/**
 * Creates a new user
 */
export const postUsers = <ThrowOnError extends boolean = false>(options: Options<PostUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUsersResponse, PostUsersError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes the given user
 */
export const deleteUsersByUserId = <ThrowOnError extends boolean = false>(options: Options<DeleteUsersByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUsersByUserIdResponse, DeleteUsersByUserIdError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/users/{userId}',
        ...options
    });
};

/**
 * Edits the given user
 */
export const putUsersByUserId = <ThrowOnError extends boolean = false>(options: Options<PutUsersByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutUsersByUserIdResponse, PutUsersByUserIdError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/users/{userId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns the assigned permissions of the given user
 */
export const getUsersByUserIdPermissions = <ThrowOnError extends boolean = false>(options: Options<GetUsersByUserIdPermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersByUserIdPermissionsResponse, GetUsersByUserIdPermissionsError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/users/{userId}/permissions',
        ...options
    });
};

/**
 * Adds a permission to the given user
 */
export const postUsersByUserIdPermissions = <ThrowOnError extends boolean = false>(options: Options<PostUsersByUserIdPermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUsersByUserIdPermissionsResponse, PostUsersByUserIdPermissionsError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/users/{userId}/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Replaces the assigned permissions of the given user
 */
export const putUsersByUserIdPermissions = <ThrowOnError extends boolean = false>(options: Options<PutUsersByUserIdPermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutUsersByUserIdPermissionsResponse, PutUsersByUserIdPermissionsError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/users/{userId}/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns the currently authenticated user
 */
export const getUser = <ThrowOnError extends boolean = false>(options?: Options<GetUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserResponse, GetUserError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/user',
        ...options
    });
};

/**
 * Returns all settings of the currently logged in user
 */
export const getUserSettings = <ThrowOnError extends boolean = false>(options?: Options<GetUserSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserSettingsResponse, GetUserSettingsError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/user/settings',
        ...options
    });
};

/**
 * Deletes the given setting of the currently logged in user
 */
export const deleteUserSettingsBySettingKey = <ThrowOnError extends boolean = false>(options: Options<DeleteUserSettingsBySettingKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserSettingsBySettingKeyResponse, DeleteUserSettingsBySettingKeyError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/user/settings/{settingKey}',
        ...options
    });
};

/**
 * Returns the given setting of the currently logged in user
 */
export const getUserSettingsBySettingKey = <ThrowOnError extends boolean = false>(options: Options<GetUserSettingsBySettingKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserSettingsBySettingKeyResponse, GetUserSettingsBySettingKeyError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/user/settings/{settingKey}',
        ...options
    });
};

/**
 * Sets the given setting of the currently logged in user
 */
export const putUserSettingsBySettingKey = <ThrowOnError extends boolean = false>(options: Options<PutUserSettingsBySettingKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutUserSettingsBySettingKeyResponse, PutUserSettingsBySettingKeyError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/user/settings/{settingKey}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns all products which are currently in stock incl. the next due date per product
 */
export const getStock = <ThrowOnError extends boolean = false>(options?: Options<GetStockData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStockResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock',
        ...options
    });
};

/**
 * Returns details of the given stock
 */
export const getStockEntryByEntryId = <ThrowOnError extends boolean = false>(options: Options<GetStockEntryByEntryIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStockEntryByEntryIdResponse, GetStockEntryByEntryIdError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/entry/{entryId}',
        ...options
    });
};

/**
 * Edits the stock entry
 */
export const putStockEntryByEntryId = <ThrowOnError extends boolean = false>(options: Options<PutStockEntryByEntryIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutStockEntryByEntryIdResponse, PutStockEntryByEntryIdError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/entry/{entryId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Prints the Grocycode / stock entry label of the given entry on the configured label printer
 */
export const getStockEntryByEntryIdPrintlabel = <ThrowOnError extends boolean = false>(options: Options<GetStockEntryByEntryIdPrintlabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStockEntryByEntryIdPrintlabelResponse, GetStockEntryByEntryIdPrintlabelError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/entry/{entryId}/printlabel',
        ...options
    });
};

/**
 * Returns all products which are due soon, overdue, expired or currently missing
 */
export const getStockVolatile = <ThrowOnError extends boolean = false>(options?: Options<GetStockVolatileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStockVolatileResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/volatile',
        ...options
    });
};

/**
 * Returns details of the given product
 */
export const getStockProductsByProductId = <ThrowOnError extends boolean = false>(options: Options<GetStockProductsByProductIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStockProductsByProductIdResponse, GetStockProductsByProductIdError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/products/{productId}',
        ...options
    });
};

/**
 * Returns all locations where the given product currently has stock
 */
export const getStockProductsByProductIdLocations = <ThrowOnError extends boolean = false>(options: Options<GetStockProductsByProductIdLocationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStockProductsByProductIdLocationsResponse, GetStockProductsByProductIdLocationsError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/products/{productId}/locations',
        ...options
    });
};

/**
 * Returns all stock entries of the given product in order of next use (Opened first, then first due first, then first in first out)
 */
export const getStockProductsByProductIdEntries = <ThrowOnError extends boolean = false>(options: Options<GetStockProductsByProductIdEntriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStockProductsByProductIdEntriesResponse, GetStockProductsByProductIdEntriesError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/products/{productId}/entries',
        ...options
    });
};

/**
 * Returns the price history of the given product
 */
export const getStockProductsByProductIdPriceHistory = <ThrowOnError extends boolean = false>(options: Options<GetStockProductsByProductIdPriceHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStockProductsByProductIdPriceHistoryResponse, GetStockProductsByProductIdPriceHistoryError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/products/{productId}/price-history',
        ...options
    });
};

/**
 * Adds the given amount of the given product to stock
 */
export const postStockProductsByProductIdAdd = <ThrowOnError extends boolean = false>(options: Options<PostStockProductsByProductIdAddData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostStockProductsByProductIdAddResponse, PostStockProductsByProductIdAddError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/products/{productId}/add',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Removes the given amount of the given product from stock
 */
export const postStockProductsByProductIdConsume = <ThrowOnError extends boolean = false>(options: Options<PostStockProductsByProductIdConsumeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostStockProductsByProductIdConsumeResponse, PostStockProductsByProductIdConsumeError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/products/{productId}/consume',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Transfers the given amount of the given product from one location to another (this is currently not supported for tare weight handling enabled products)
 */
export const postStockProductsByProductIdTransfer = <ThrowOnError extends boolean = false>(options: Options<PostStockProductsByProductIdTransferData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostStockProductsByProductIdTransferResponse, PostStockProductsByProductIdTransferError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/products/{productId}/transfer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Inventories the given product (adds/removes based on the given new amount)
 */
export const postStockProductsByProductIdInventory = <ThrowOnError extends boolean = false>(options: Options<PostStockProductsByProductIdInventoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostStockProductsByProductIdInventoryResponse, PostStockProductsByProductIdInventoryError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/products/{productId}/inventory',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Marks the given amount of the given product as opened
 */
export const postStockProductsByProductIdOpen = <ThrowOnError extends boolean = false>(options: Options<PostStockProductsByProductIdOpenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostStockProductsByProductIdOpenResponse, PostStockProductsByProductIdOpenError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/products/{productId}/open',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Prints the Grocycode label of the given product on the configured label printer
 */
export const getStockProductsByProductIdPrintlabel = <ThrowOnError extends boolean = false>(options: Options<GetStockProductsByProductIdPrintlabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStockProductsByProductIdPrintlabelResponse, GetStockProductsByProductIdPrintlabelError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/products/{productId}/printlabel',
        ...options
    });
};

/**
 * Merges two products into one
 */
export const postStockProductsByProductIdToKeepMergeByProductIdToRemove = <ThrowOnError extends boolean = false>(options: Options<PostStockProductsByProductIdToKeepMergeByProductIdToRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostStockProductsByProductIdToKeepMergeByProductIdToRemoveResponse, PostStockProductsByProductIdToKeepMergeByProductIdToRemoveError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/products/{productIdToKeep}/merge/{productIdToRemove}',
        ...options
    });
};

/**
 * Returns details of the given product by its barcode
 */
export const getStockProductsByBarcodeByBarcode = <ThrowOnError extends boolean = false>(options: Options<GetStockProductsByBarcodeByBarcodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStockProductsByBarcodeByBarcodeResponse, GetStockProductsByBarcodeByBarcodeError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/products/by-barcode/{barcode}',
        ...options
    });
};

/**
 * Adds the given amount of the by its barcode given product to stock
 */
export const postStockProductsByBarcodeByBarcodeAdd = <ThrowOnError extends boolean = false>(options: Options<PostStockProductsByBarcodeByBarcodeAddData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostStockProductsByBarcodeByBarcodeAddResponse, PostStockProductsByBarcodeByBarcodeAddError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/products/by-barcode/{barcode}/add',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Removes the given amount of the by its barcode given product from stock
 */
export const postStockProductsByBarcodeByBarcodeConsume = <ThrowOnError extends boolean = false>(options: Options<PostStockProductsByBarcodeByBarcodeConsumeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostStockProductsByBarcodeByBarcodeConsumeResponse, PostStockProductsByBarcodeByBarcodeConsumeError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/products/by-barcode/{barcode}/consume',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Transfers the given amount of the by its barcode given product from one location to another (this is currently not supported for tare weight handling enabled products)
 */
export const postStockProductsByBarcodeByBarcodeTransfer = <ThrowOnError extends boolean = false>(options: Options<PostStockProductsByBarcodeByBarcodeTransferData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostStockProductsByBarcodeByBarcodeTransferResponse, PostStockProductsByBarcodeByBarcodeTransferError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/products/by-barcode/{barcode}/transfer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Inventories the by its barcode given product (adds/removes based on the given new amount)
 */
export const postStockProductsByBarcodeByBarcodeInventory = <ThrowOnError extends boolean = false>(options: Options<PostStockProductsByBarcodeByBarcodeInventoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostStockProductsByBarcodeByBarcodeInventoryResponse, PostStockProductsByBarcodeByBarcodeInventoryError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/products/by-barcode/{barcode}/inventory',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Marks the given amount of the by its barcode given product as opened
 */
export const postStockProductsByBarcodeByBarcodeOpen = <ThrowOnError extends boolean = false>(options: Options<PostStockProductsByBarcodeByBarcodeOpenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostStockProductsByBarcodeByBarcodeOpenResponse, PostStockProductsByBarcodeByBarcodeOpenError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/products/by-barcode/{barcode}/open',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns all stock entries of the given location
 */
export const getStockLocationsByLocationIdEntries = <ThrowOnError extends boolean = false>(options: Options<GetStockLocationsByLocationIdEntriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStockLocationsByLocationIdEntriesResponse, GetStockLocationsByLocationIdEntriesError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/locations/{locationId}/entries',
        ...options
    });
};

/**
 * Adds currently missing products (below defined min. stock amount) to the given shopping list
 */
export const postStockShoppinglistAddMissingProducts = <ThrowOnError extends boolean = false>(options?: Options<PostStockShoppinglistAddMissingProductsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostStockShoppinglistAddMissingProductsResponse, PostStockShoppinglistAddMissingProductsError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/shoppinglist/add-missing-products',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Adds overdue products to the given shopping list
 */
export const postStockShoppinglistAddOverdueProducts = <ThrowOnError extends boolean = false>(options?: Options<PostStockShoppinglistAddOverdueProductsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostStockShoppinglistAddOverdueProductsResponse, PostStockShoppinglistAddOverdueProductsError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/shoppinglist/add-overdue-products',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Adds expired products to the given shopping list
 */
export const postStockShoppinglistAddExpiredProducts = <ThrowOnError extends boolean = false>(options?: Options<PostStockShoppinglistAddExpiredProductsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostStockShoppinglistAddExpiredProductsResponse, PostStockShoppinglistAddExpiredProductsError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/shoppinglist/add-expired-products',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Removes all items from the given shopping list
 */
export const postStockShoppinglistClear = <ThrowOnError extends boolean = false>(options?: Options<PostStockShoppinglistClearData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostStockShoppinglistClearResponse, PostStockShoppinglistClearError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/shoppinglist/clear',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Adds the given amount of the given product to the given shopping list
 * If the product is already on the shopping list, the given amount will increase the amount of the already existing item, otherwise a new item will be added
 */
export const postStockShoppinglistAddProduct = <ThrowOnError extends boolean = false>(options: Options<PostStockShoppinglistAddProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostStockShoppinglistAddProductResponse, PostStockShoppinglistAddProductError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/shoppinglist/add-product',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Removes the given amount of the given product from the given shopping list, if it is on it
 * If the resulting amount is <= 0, the item will be completely removed from the given list, otherwise the given amount will reduce the amount of the existing item
 */
export const postStockShoppinglistRemoveProduct = <ThrowOnError extends boolean = false>(options: Options<PostStockShoppinglistRemoveProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostStockShoppinglistRemoveProductResponse, PostStockShoppinglistRemoveProductError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/shoppinglist/remove-product',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns the given stock booking
 */
export const getStockBookingsByBookingId = <ThrowOnError extends boolean = false>(options: Options<GetStockBookingsByBookingIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStockBookingsByBookingIdResponse, GetStockBookingsByBookingIdError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/bookings/{bookingId}',
        ...options
    });
};

/**
 * Undoes a booking
 */
export const postStockBookingsByBookingIdUndo = <ThrowOnError extends boolean = false>(options: Options<PostStockBookingsByBookingIdUndoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostStockBookingsByBookingIdUndoResponse, PostStockBookingsByBookingIdUndoError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/bookings/{bookingId}/undo',
        ...options
    });
};

/**
 * Returns all stock bookings of the given transaction id
 */
export const getStockTransactionsByTransactionId = <ThrowOnError extends boolean = false>(options: Options<GetStockTransactionsByTransactionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStockTransactionsByTransactionIdResponse, GetStockTransactionsByTransactionIdError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/transactions/{transactionId}',
        ...options
    });
};

/**
 * Undoes a transaction
 */
export const postStockTransactionsByTransactionIdUndo = <ThrowOnError extends boolean = false>(options: Options<PostStockTransactionsByTransactionIdUndoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostStockTransactionsByTransactionIdUndoResponse, PostStockTransactionsByTransactionIdUndoError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/transactions/{transactionId}/undo',
        ...options
    });
};

/**
 * Executes an external barcode lookoup via the configured plugin with the given barcode
 */
export const getStockBarcodesExternalLookupByBarcode = <ThrowOnError extends boolean = false>(options: Options<GetStockBarcodesExternalLookupByBarcodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStockBarcodesExternalLookupByBarcodeResponse, GetStockBarcodesExternalLookupByBarcodeError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/stock/barcodes/external-lookup/{barcode}',
        ...options
    });
};

/**
 * Adds all missing products for the given recipe to the shopping list
 */
export const postRecipesByRecipeIdAddNotFulfilledProductsToShoppinglist = <ThrowOnError extends boolean = false>(options: Options<PostRecipesByRecipeIdAddNotFulfilledProductsToShoppinglistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostRecipesByRecipeIdAddNotFulfilledProductsToShoppinglistResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/recipes/{recipeId}/add-not-fulfilled-products-to-shoppinglist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get stock fulfillment information for the given recipe
 */
export const getRecipesByRecipeIdFulfillment = <ThrowOnError extends boolean = false>(options: Options<GetRecipesByRecipeIdFulfillmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRecipesByRecipeIdFulfillmentResponse, GetRecipesByRecipeIdFulfillmentError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/recipes/{recipeId}/fulfillment',
        ...options
    });
};

/**
 * Consumes all in stock ingredients of the given recipe (for ingredients that are only partially in stock, the in stock amount will be consumed)
 */
export const postRecipesByRecipeIdConsume = <ThrowOnError extends boolean = false>(options: Options<PostRecipesByRecipeIdConsumeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostRecipesByRecipeIdConsumeResponse, PostRecipesByRecipeIdConsumeError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/recipes/{recipeId}/consume',
        ...options
    });
};

/**
 * Get stock fulfillment information for all recipe
 */
export const getRecipesFulfillment = <ThrowOnError extends boolean = false>(options?: Options<GetRecipesFulfillmentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecipesFulfillmentResponse, GetRecipesFulfillmentError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/recipes/fulfillment',
        ...options
    });
};

/**
 * Copies a recipe
 */
export const postRecipesByRecipeIdCopy = <ThrowOnError extends boolean = false>(options: Options<PostRecipesByRecipeIdCopyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostRecipesByRecipeIdCopyResponse, PostRecipesByRecipeIdCopyError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/recipes/{recipeId}/copy',
        ...options
    });
};

/**
 * Prints the Grocycode label of the given recipe on the configured label printer
 */
export const getRecipesByRecipeIdPrintlabel = <ThrowOnError extends boolean = false>(options: Options<GetRecipesByRecipeIdPrintlabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRecipesByRecipeIdPrintlabelResponse, GetRecipesByRecipeIdPrintlabelError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/recipes/{recipeId}/printlabel',
        ...options
    });
};

/**
 * Returns all chores incl. the next estimated execution time per chore
 */
export const getChores = <ThrowOnError extends boolean = false>(options?: Options<GetChoresData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetChoresResponse, GetChoresError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/chores',
        ...options
    });
};

/**
 * Returns details of the given chore
 */
export const getChoresByChoreId = <ThrowOnError extends boolean = false>(options: Options<GetChoresByChoreIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChoresByChoreIdResponse, GetChoresByChoreIdError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/chores/{choreId}',
        ...options
    });
};

/**
 * Tracks an execution of the given chore
 */
export const postChoresByChoreIdExecute = <ThrowOnError extends boolean = false>(options: Options<PostChoresByChoreIdExecuteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostChoresByChoreIdExecuteResponse, PostChoresByChoreIdExecuteError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/chores/{choreId}/execute',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Undoes a chore execution
 */
export const postChoresExecutionsByExecutionIdUndo = <ThrowOnError extends boolean = false>(options: Options<PostChoresExecutionsByExecutionIdUndoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostChoresExecutionsByExecutionIdUndoResponse, PostChoresExecutionsByExecutionIdUndoError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/chores/executions/{executionId}/undo',
        ...options
    });
};

/**
 * (Re)calculates all next user assignments of all chores
 */
export const postChoresExecutionsCalculateNextAssignments = <ThrowOnError extends boolean = false>(options?: Options<PostChoresExecutionsCalculateNextAssignmentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostChoresExecutionsCalculateNextAssignmentsResponse, PostChoresExecutionsCalculateNextAssignmentsError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/chores/executions/calculate-next-assignments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Prints the Grocycode label of the given chore on the configured label printer
 */
export const getChoresByChoreIdPrintlabel = <ThrowOnError extends boolean = false>(options: Options<GetChoresByChoreIdPrintlabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChoresByChoreIdPrintlabelResponse, GetChoresByChoreIdPrintlabelError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/chores/{choreId}/printlabel',
        ...options
    });
};

/**
 * Merges two chores into one
 */
export const postChoresByChoreIdToKeepMergeByChoreIdToRemove = <ThrowOnError extends boolean = false>(options: Options<PostChoresByChoreIdToKeepMergeByChoreIdToRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostChoresByChoreIdToKeepMergeByChoreIdToRemoveResponse, PostChoresByChoreIdToKeepMergeByChoreIdToRemoveError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/chores/{choreIdToKeep}/merge/{choreIdToRemove}',
        ...options
    });
};

/**
 * Returns all batteries incl. the next estimated charge time per battery
 */
export const getBatteries = <ThrowOnError extends boolean = false>(options?: Options<GetBatteriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBatteriesResponse, GetBatteriesError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/batteries',
        ...options
    });
};

/**
 * Returns details of the given battery
 */
export const getBatteriesByBatteryId = <ThrowOnError extends boolean = false>(options: Options<GetBatteriesByBatteryIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBatteriesByBatteryIdResponse, GetBatteriesByBatteryIdError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/batteries/{batteryId}',
        ...options
    });
};

/**
 * Tracks a charge cycle of the given battery
 */
export const postBatteriesByBatteryIdCharge = <ThrowOnError extends boolean = false>(options: Options<PostBatteriesByBatteryIdChargeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostBatteriesByBatteryIdChargeResponse, PostBatteriesByBatteryIdChargeError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/batteries/{batteryId}/charge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Undoes a battery charge cycle
 */
export const postBatteriesChargeCyclesByChargeCycleIdUndo = <ThrowOnError extends boolean = false>(options: Options<PostBatteriesChargeCyclesByChargeCycleIdUndoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostBatteriesChargeCyclesByChargeCycleIdUndoResponse, PostBatteriesChargeCyclesByChargeCycleIdUndoError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/batteries/charge-cycles/{chargeCycleId}/undo',
        ...options
    });
};

/**
 * Prints the Grocycode label of the given battery on the configured label printer
 */
export const getBatteriesByBatteryIdPrintlabel = <ThrowOnError extends boolean = false>(options: Options<GetBatteriesByBatteryIdPrintlabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBatteriesByBatteryIdPrintlabelResponse, GetBatteriesByBatteryIdPrintlabelError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/batteries/{batteryId}/printlabel',
        ...options
    });
};

/**
 * Returns all tasks which are not done yet
 */
export const getTasks = <ThrowOnError extends boolean = false>(options?: Options<GetTasksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTasksResponse, GetTasksError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/tasks',
        ...options
    });
};

/**
 * Marks the given task as completed
 */
export const postTasksByTaskIdComplete = <ThrowOnError extends boolean = false>(options: Options<PostTasksByTaskIdCompleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTasksByTaskIdCompleteResponse, PostTasksByTaskIdCompleteError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/tasks/{taskId}/complete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Marks the given task as not completed
 */
export const postTasksByTaskIdUndo = <ThrowOnError extends boolean = false>(options: Options<PostTasksByTaskIdUndoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTasksByTaskIdUndoResponse, PostTasksByTaskIdUndoError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/tasks/{taskId}/undo',
        ...options
    });
};

/**
 * Returns the calendar in iCal format
 */
export const getCalendarIcal = <ThrowOnError extends boolean = false>(options?: Options<GetCalendarIcalData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCalendarIcalResponse, GetCalendarIcalError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/calendar/ical',
        ...options
    });
};

/**
 * Returns a (public) sharing link for the calendar in iCal format
 */
export const getCalendarIcalSharingLink = <ThrowOnError extends boolean = false>(options?: Options<GetCalendarIcalSharingLinkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCalendarIcalSharingLinkResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/calendar/ical/sharing-link',
        ...options
    });
};

/**
 * Prints the shoppinglist with a thermal printer
 */
export const getPrintShoppinglistThermal = <ThrowOnError extends boolean = false>(options?: Options<GetPrintShoppinglistThermalData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPrintShoppinglistThermalResponse, GetPrintShoppinglistThermalError, ThrowOnError>({
        security: [
            {
                name: 'GROCY-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/print/shoppinglist/thermal',
        ...options
    });
};