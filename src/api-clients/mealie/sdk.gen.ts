// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetAppInfoApiAppAboutGetData, GetAppInfoApiAppAboutGetResponse, GetStartupInfoApiAppAboutStartupInfoGetData, GetStartupInfoApiAppAboutStartupInfoGetResponse, GetAppThemeApiAppAboutThemeGetData, GetAppThemeApiAppAboutThemeGetResponse, GetTokenApiAuthTokenPostData, GetTokenApiAuthTokenPostError, OauthLoginApiAuthOauthGetData, OauthCallbackApiAuthOauthCallbackGetData, RefreshTokenApiAuthRefreshGetData, LogoutApiAuthLogoutPostData, RegisterNewUserApiUsersRegisterPostData, RegisterNewUserApiUsersRegisterPostResponse, RegisterNewUserApiUsersRegisterPostError, GetLoggedInUserApiUsersSelfGetData, GetLoggedInUserApiUsersSelfGetResponse, GetLoggedInUserApiUsersSelfGetError, GetLoggedInUserRatingsApiUsersSelfRatingsGetData, GetLoggedInUserRatingsApiUsersSelfRatingsGetResponse, GetLoggedInUserRatingsApiUsersSelfRatingsGetError, GetLoggedInUserRatingForRecipeApiUsersSelfRatingsRecipeIdGetData, GetLoggedInUserRatingForRecipeApiUsersSelfRatingsRecipeIdGetResponse, GetLoggedInUserRatingForRecipeApiUsersSelfRatingsRecipeIdGetError, GetLoggedInUserFavoritesApiUsersSelfFavoritesGetData, GetLoggedInUserFavoritesApiUsersSelfFavoritesGetResponse, GetLoggedInUserFavoritesApiUsersSelfFavoritesGetError, UpdatePasswordApiUsersPasswordPutData, UpdatePasswordApiUsersPasswordPutError, DeleteUserApiUsersItemIdDeleteData, DeleteUserApiUsersItemIdDeleteError, GetUserApiUsersItemIdGetData, GetUserApiUsersItemIdGetResponse, GetUserApiUsersItemIdGetError, UpdateUserApiUsersItemIdPutData, UpdateUserApiUsersItemIdPutError, GetAllApiUsersGetData, GetAllApiUsersGetResponse, GetAllApiUsersGetError, CreateUserApiUsersPostData, CreateUserApiUsersPostResponse, CreateUserApiUsersPostError, ForgotPasswordApiUsersForgotPasswordPostData, ForgotPasswordApiUsersForgotPasswordPostError, ResetPasswordApiUsersResetPasswordPostData, ResetPasswordApiUsersResetPasswordPostError, UpdateUserImageApiUsersIdImagePostData, UpdateUserImageApiUsersIdImagePostError, CreateApiTokenApiUsersApiTokensPostData, CreateApiTokenApiUsersApiTokensPostResponse, CreateApiTokenApiUsersApiTokensPostError, DeleteApiTokenApiUsersApiTokensTokenIdDeleteData, DeleteApiTokenApiUsersApiTokensTokenIdDeleteResponse, DeleteApiTokenApiUsersApiTokensTokenIdDeleteError, GetRatingsApiUsersIdRatingsGetData, GetRatingsApiUsersIdRatingsGetResponse, GetRatingsApiUsersIdRatingsGetError, GetFavoritesApiUsersIdFavoritesGetData, GetFavoritesApiUsersIdFavoritesGetResponse, GetFavoritesApiUsersIdFavoritesGetError, SetRatingApiUsersIdRatingsSlugPostData, SetRatingApiUsersIdRatingsSlugPostError, RemoveFavoriteApiUsersIdFavoritesSlugDeleteData, RemoveFavoriteApiUsersIdFavoritesSlugDeleteError, AddFavoriteApiUsersIdFavoritesSlugPostData, AddFavoriteApiUsersIdFavoritesSlugPostError, GetAllApiHouseholdsCookbooksGetData, GetAllApiHouseholdsCookbooksGetResponse, GetAllApiHouseholdsCookbooksGetError, CreateOneApiHouseholdsCookbooksPostData, CreateOneApiHouseholdsCookbooksPostResponse, CreateOneApiHouseholdsCookbooksPostError, UpdateManyApiHouseholdsCookbooksPutData, UpdateManyApiHouseholdsCookbooksPutResponse, UpdateManyApiHouseholdsCookbooksPutError, DeleteOneApiHouseholdsCookbooksItemIdDeleteData, DeleteOneApiHouseholdsCookbooksItemIdDeleteResponse, DeleteOneApiHouseholdsCookbooksItemIdDeleteError, GetOneApiHouseholdsCookbooksItemIdGetData, GetOneApiHouseholdsCookbooksItemIdGetResponse, GetOneApiHouseholdsCookbooksItemIdGetError, UpdateOneApiHouseholdsCookbooksItemIdPutData, UpdateOneApiHouseholdsCookbooksItemIdPutResponse, UpdateOneApiHouseholdsCookbooksItemIdPutError, GetAllApiHouseholdsEventsNotificationsGetData, GetAllApiHouseholdsEventsNotificationsGetResponse, GetAllApiHouseholdsEventsNotificationsGetError, CreateOneApiHouseholdsEventsNotificationsPostData, CreateOneApiHouseholdsEventsNotificationsPostResponse, CreateOneApiHouseholdsEventsNotificationsPostError, DeleteOneApiHouseholdsEventsNotificationsItemIdDeleteData, DeleteOneApiHouseholdsEventsNotificationsItemIdDeleteResponse, DeleteOneApiHouseholdsEventsNotificationsItemIdDeleteError, GetOneApiHouseholdsEventsNotificationsItemIdGetData, GetOneApiHouseholdsEventsNotificationsItemIdGetResponse, GetOneApiHouseholdsEventsNotificationsItemIdGetError, UpdateOneApiHouseholdsEventsNotificationsItemIdPutData, UpdateOneApiHouseholdsEventsNotificationsItemIdPutResponse, UpdateOneApiHouseholdsEventsNotificationsItemIdPutError, TestNotificationApiHouseholdsEventsNotificationsItemIdTestPostData, TestNotificationApiHouseholdsEventsNotificationsItemIdTestPostResponse, TestNotificationApiHouseholdsEventsNotificationsItemIdTestPostError, GetAllApiHouseholdsRecipeActionsGetData, GetAllApiHouseholdsRecipeActionsGetResponse, GetAllApiHouseholdsRecipeActionsGetError, CreateOneApiHouseholdsRecipeActionsPostData, CreateOneApiHouseholdsRecipeActionsPostResponse, CreateOneApiHouseholdsRecipeActionsPostError, DeleteOneApiHouseholdsRecipeActionsItemIdDeleteData, DeleteOneApiHouseholdsRecipeActionsItemIdDeleteResponse, DeleteOneApiHouseholdsRecipeActionsItemIdDeleteError, GetOneApiHouseholdsRecipeActionsItemIdGetData, GetOneApiHouseholdsRecipeActionsItemIdGetResponse, GetOneApiHouseholdsRecipeActionsItemIdGetError, UpdateOneApiHouseholdsRecipeActionsItemIdPutData, UpdateOneApiHouseholdsRecipeActionsItemIdPutResponse, UpdateOneApiHouseholdsRecipeActionsItemIdPutError, TriggerActionApiHouseholdsRecipeActionsItemIdTriggerRecipeSlugPostData, TriggerActionApiHouseholdsRecipeActionsItemIdTriggerRecipeSlugPostError, GetLoggedInUserHouseholdApiHouseholdsSelfGetData, GetLoggedInUserHouseholdApiHouseholdsSelfGetResponse, GetLoggedInUserHouseholdApiHouseholdsSelfGetError, GetHouseholdRecipeApiHouseholdsSelfRecipesRecipeSlugGetData, GetHouseholdRecipeApiHouseholdsSelfRecipesRecipeSlugGetResponse, GetHouseholdRecipeApiHouseholdsSelfRecipesRecipeSlugGetError, GetHouseholdMembersApiHouseholdsMembersGetData, GetHouseholdMembersApiHouseholdsMembersGetResponse, GetHouseholdMembersApiHouseholdsMembersGetError, GetHouseholdPreferencesApiHouseholdsPreferencesGetData, GetHouseholdPreferencesApiHouseholdsPreferencesGetResponse, GetHouseholdPreferencesApiHouseholdsPreferencesGetError, UpdateHouseholdPreferencesApiHouseholdsPreferencesPutData, UpdateHouseholdPreferencesApiHouseholdsPreferencesPutResponse, UpdateHouseholdPreferencesApiHouseholdsPreferencesPutError, SetMemberPermissionsApiHouseholdsPermissionsPutData, SetMemberPermissionsApiHouseholdsPermissionsPutResponse, SetMemberPermissionsApiHouseholdsPermissionsPutError, GetStatisticsApiHouseholdsStatisticsGetData, GetStatisticsApiHouseholdsStatisticsGetResponse, GetStatisticsApiHouseholdsStatisticsGetError, GetInviteTokensApiHouseholdsInvitationsGetData, GetInviteTokensApiHouseholdsInvitationsGetResponse, GetInviteTokensApiHouseholdsInvitationsGetError, CreateInviteTokenApiHouseholdsInvitationsPostData, CreateInviteTokenApiHouseholdsInvitationsPostResponse, CreateInviteTokenApiHouseholdsInvitationsPostError, EmailInvitationApiHouseholdsInvitationsEmailPostData, EmailInvitationApiHouseholdsInvitationsEmailPostResponse, EmailInvitationApiHouseholdsInvitationsEmailPostError, GetAllApiHouseholdsShoppingListsGetData, GetAllApiHouseholdsShoppingListsGetResponse, GetAllApiHouseholdsShoppingListsGetError, CreateOneApiHouseholdsShoppingListsPostData, CreateOneApiHouseholdsShoppingListsPostResponse, CreateOneApiHouseholdsShoppingListsPostError, DeleteOneApiHouseholdsShoppingListsItemIdDeleteData, DeleteOneApiHouseholdsShoppingListsItemIdDeleteResponse, DeleteOneApiHouseholdsShoppingListsItemIdDeleteError, GetOneApiHouseholdsShoppingListsItemIdGetData, GetOneApiHouseholdsShoppingListsItemIdGetResponse, GetOneApiHouseholdsShoppingListsItemIdGetError, UpdateOneApiHouseholdsShoppingListsItemIdPutData, UpdateOneApiHouseholdsShoppingListsItemIdPutResponse, UpdateOneApiHouseholdsShoppingListsItemIdPutError, UpdateLabelSettingsApiHouseholdsShoppingListsItemIdLabelSettingsPutData, UpdateLabelSettingsApiHouseholdsShoppingListsItemIdLabelSettingsPutResponse, UpdateLabelSettingsApiHouseholdsShoppingListsItemIdLabelSettingsPutError, AddRecipeIngredientsToListApiHouseholdsShoppingListsItemIdRecipePostData, AddRecipeIngredientsToListApiHouseholdsShoppingListsItemIdRecipePostResponse, AddRecipeIngredientsToListApiHouseholdsShoppingListsItemIdRecipePostError, AddSingleRecipeIngredientsToListApiHouseholdsShoppingListsItemIdRecipeRecipeIdPostData, AddSingleRecipeIngredientsToListApiHouseholdsShoppingListsItemIdRecipeRecipeIdPostResponse, AddSingleRecipeIngredientsToListApiHouseholdsShoppingListsItemIdRecipeRecipeIdPostError, RemoveRecipeIngredientsFromListApiHouseholdsShoppingListsItemIdRecipeRecipeIdDeletePostData, RemoveRecipeIngredientsFromListApiHouseholdsShoppingListsItemIdRecipeRecipeIdDeletePostResponse, RemoveRecipeIngredientsFromListApiHouseholdsShoppingListsItemIdRecipeRecipeIdDeletePostError, DeleteManyApiHouseholdsShoppingItemsDeleteData, DeleteManyApiHouseholdsShoppingItemsDeleteResponse, DeleteManyApiHouseholdsShoppingItemsDeleteError, GetAllApiHouseholdsShoppingItemsGetData, GetAllApiHouseholdsShoppingItemsGetResponse, GetAllApiHouseholdsShoppingItemsGetError, CreateOneApiHouseholdsShoppingItemsPostData, CreateOneApiHouseholdsShoppingItemsPostResponse, CreateOneApiHouseholdsShoppingItemsPostError, UpdateManyApiHouseholdsShoppingItemsPutData, UpdateManyApiHouseholdsShoppingItemsPutResponse, UpdateManyApiHouseholdsShoppingItemsPutError, CreateManyApiHouseholdsShoppingItemsCreateBulkPostData, CreateManyApiHouseholdsShoppingItemsCreateBulkPostResponse, CreateManyApiHouseholdsShoppingItemsCreateBulkPostError, DeleteOneApiHouseholdsShoppingItemsItemIdDeleteData, DeleteOneApiHouseholdsShoppingItemsItemIdDeleteResponse, DeleteOneApiHouseholdsShoppingItemsItemIdDeleteError, GetOneApiHouseholdsShoppingItemsItemIdGetData, GetOneApiHouseholdsShoppingItemsItemIdGetResponse, GetOneApiHouseholdsShoppingItemsItemIdGetError, UpdateOneApiHouseholdsShoppingItemsItemIdPutData, UpdateOneApiHouseholdsShoppingItemsItemIdPutResponse, UpdateOneApiHouseholdsShoppingItemsItemIdPutError, GetAllApiHouseholdsWebhooksGetData, GetAllApiHouseholdsWebhooksGetResponse, GetAllApiHouseholdsWebhooksGetError, CreateOneApiHouseholdsWebhooksPostData, CreateOneApiHouseholdsWebhooksPostResponse, CreateOneApiHouseholdsWebhooksPostError, RerunWebhooksApiHouseholdsWebhooksRerunPostData, RerunWebhooksApiHouseholdsWebhooksRerunPostError, DeleteOneApiHouseholdsWebhooksItemIdDeleteData, DeleteOneApiHouseholdsWebhooksItemIdDeleteResponse, DeleteOneApiHouseholdsWebhooksItemIdDeleteError, GetOneApiHouseholdsWebhooksItemIdGetData, GetOneApiHouseholdsWebhooksItemIdGetResponse, GetOneApiHouseholdsWebhooksItemIdGetError, UpdateOneApiHouseholdsWebhooksItemIdPutData, UpdateOneApiHouseholdsWebhooksItemIdPutResponse, UpdateOneApiHouseholdsWebhooksItemIdPutError, TestOneApiHouseholdsWebhooksItemIdTestPostData, TestOneApiHouseholdsWebhooksItemIdTestPostError, GetAllApiHouseholdsMealplansRulesGetData, GetAllApiHouseholdsMealplansRulesGetResponse, GetAllApiHouseholdsMealplansRulesGetError, CreateOneApiHouseholdsMealplansRulesPostData, CreateOneApiHouseholdsMealplansRulesPostResponse, CreateOneApiHouseholdsMealplansRulesPostError, DeleteOneApiHouseholdsMealplansRulesItemIdDeleteData, DeleteOneApiHouseholdsMealplansRulesItemIdDeleteResponse, DeleteOneApiHouseholdsMealplansRulesItemIdDeleteError, GetOneApiHouseholdsMealplansRulesItemIdGetData, GetOneApiHouseholdsMealplansRulesItemIdGetResponse, GetOneApiHouseholdsMealplansRulesItemIdGetError, UpdateOneApiHouseholdsMealplansRulesItemIdPutData, UpdateOneApiHouseholdsMealplansRulesItemIdPutResponse, UpdateOneApiHouseholdsMealplansRulesItemIdPutError, GetAllApiHouseholdsMealplansGetData, GetAllApiHouseholdsMealplansGetResponse, GetAllApiHouseholdsMealplansGetError, CreateOneApiHouseholdsMealplansPostData, CreateOneApiHouseholdsMealplansPostResponse, CreateOneApiHouseholdsMealplansPostError, GetTodaysMealsApiHouseholdsMealplansTodayGetData, GetTodaysMealsApiHouseholdsMealplansTodayGetError, CreateRandomMealApiHouseholdsMealplansRandomPostData, CreateRandomMealApiHouseholdsMealplansRandomPostResponse, CreateRandomMealApiHouseholdsMealplansRandomPostError, DeleteOneApiHouseholdsMealplansItemIdDeleteData, DeleteOneApiHouseholdsMealplansItemIdDeleteResponse, DeleteOneApiHouseholdsMealplansItemIdDeleteError, GetOneApiHouseholdsMealplansItemIdGetData, GetOneApiHouseholdsMealplansItemIdGetResponse, GetOneApiHouseholdsMealplansItemIdGetError, UpdateOneApiHouseholdsMealplansItemIdPutData, UpdateOneApiHouseholdsMealplansItemIdPutResponse, UpdateOneApiHouseholdsMealplansItemIdPutError, GetAllHouseholdsApiGroupsHouseholdsGetData, GetAllHouseholdsApiGroupsHouseholdsGetResponse, GetAllHouseholdsApiGroupsHouseholdsGetError, GetOneHouseholdApiGroupsHouseholdsHouseholdSlugGetData, GetOneHouseholdApiGroupsHouseholdsHouseholdSlugGetResponse, GetOneHouseholdApiGroupsHouseholdsHouseholdSlugGetError, GetLoggedInUserGroupApiGroupsSelfGetData, GetLoggedInUserGroupApiGroupsSelfGetResponse, GetLoggedInUserGroupApiGroupsSelfGetError, GetGroupMembersApiGroupsMembersGetData, GetGroupMembersApiGroupsMembersGetResponse, GetGroupMembersApiGroupsMembersGetError, GetGroupMemberApiGroupsMembersUsernameOrIdGetData, GetGroupMemberApiGroupsMembersUsernameOrIdGetResponse, GetGroupMemberApiGroupsMembersUsernameOrIdGetError, GetGroupPreferencesApiGroupsPreferencesGetData, GetGroupPreferencesApiGroupsPreferencesGetResponse, GetGroupPreferencesApiGroupsPreferencesGetError, UpdateGroupPreferencesApiGroupsPreferencesPutData, UpdateGroupPreferencesApiGroupsPreferencesPutResponse, UpdateGroupPreferencesApiGroupsPreferencesPutError, GetStorageApiGroupsStorageGetData, GetStorageApiGroupsStorageGetResponse, GetStorageApiGroupsStorageGetError, StartDataMigrationApiGroupsMigrationsPostData, StartDataMigrationApiGroupsMigrationsPostResponse, StartDataMigrationApiGroupsMigrationsPostError, GetAllApiGroupsReportsGetData, GetAllApiGroupsReportsGetResponse, GetAllApiGroupsReportsGetError, DeleteOneApiGroupsReportsItemIdDeleteData, DeleteOneApiGroupsReportsItemIdDeleteError, GetOneApiGroupsReportsItemIdGetData, GetOneApiGroupsReportsItemIdGetResponse, GetOneApiGroupsReportsItemIdGetError, GetAllApiGroupsLabelsGetData, GetAllApiGroupsLabelsGetResponse, GetAllApiGroupsLabelsGetError, CreateOneApiGroupsLabelsPostData, CreateOneApiGroupsLabelsPostResponse, CreateOneApiGroupsLabelsPostError, DeleteOneApiGroupsLabelsItemIdDeleteData, DeleteOneApiGroupsLabelsItemIdDeleteResponse, DeleteOneApiGroupsLabelsItemIdDeleteError, GetOneApiGroupsLabelsItemIdGetData, GetOneApiGroupsLabelsItemIdGetResponse, GetOneApiGroupsLabelsItemIdGetError, UpdateOneApiGroupsLabelsItemIdPutData, UpdateOneApiGroupsLabelsItemIdPutResponse, UpdateOneApiGroupsLabelsItemIdPutError, SeedFoodsApiGroupsSeedersFoodsPostData, SeedFoodsApiGroupsSeedersFoodsPostResponse, SeedFoodsApiGroupsSeedersFoodsPostError, SeedLabelsApiGroupsSeedersLabelsPostData, SeedLabelsApiGroupsSeedersLabelsPostResponse, SeedLabelsApiGroupsSeedersLabelsPostError, SeedUnitsApiGroupsSeedersUnitsPostData, SeedUnitsApiGroupsSeedersUnitsPostResponse, SeedUnitsApiGroupsSeedersUnitsPostError, GetRecipeFormatsAndTemplatesApiRecipesExportsGetData, GetRecipeFormatsAndTemplatesApiRecipesExportsGetResponse, GetRecipeFormatsAndTemplatesApiRecipesExportsGetError, GetRecipeAsFormatApiRecipesSlugExportsGetData, GetRecipeAsFormatApiRecipesSlugExportsGetError, GetRecipeZipTokenApiRecipesSlugExportsPostData, GetRecipeZipTokenApiRecipesSlugExportsPostResponse, GetRecipeZipTokenApiRecipesSlugExportsPostError, GetRecipeAsZipApiRecipesSlugExportsZipGetData, GetRecipeAsZipApiRecipesSlugExportsZipGetError, TestParseRecipeUrlApiRecipesTestScrapeUrlPostData, TestParseRecipeUrlApiRecipesTestScrapeUrlPostError, CreateRecipeFromHtmlOrJsonApiRecipesCreateHtmlOrJsonPostData, CreateRecipeFromHtmlOrJsonApiRecipesCreateHtmlOrJsonPostError, ParseRecipeUrlApiRecipesCreateUrlPostData, ParseRecipeUrlApiRecipesCreateUrlPostResponse, ParseRecipeUrlApiRecipesCreateUrlPostError, ParseRecipeUrlBulkApiRecipesCreateUrlBulkPostData, ParseRecipeUrlBulkApiRecipesCreateUrlBulkPostError, CreateRecipeFromZipApiRecipesCreateZipPostData, CreateRecipeFromZipApiRecipesCreateZipPostError, CreateRecipeFromImageApiRecipesCreateImagePostData, CreateRecipeFromImageApiRecipesCreateImagePostError, GetAllApiRecipesGetData, GetAllApiRecipesGetResponse, GetAllApiRecipesGetError, PatchManyApiRecipesPatchData, PatchManyApiRecipesPatchError, CreateOneApiRecipesPostData, CreateOneApiRecipesPostResponse, CreateOneApiRecipesPostError, UpdateManyApiRecipesPutData, UpdateManyApiRecipesPutError, SuggestRecipesApiRecipesSuggestionsGetData, SuggestRecipesApiRecipesSuggestionsGetResponse, SuggestRecipesApiRecipesSuggestionsGetError, DeleteOneApiRecipesSlugDeleteData, DeleteOneApiRecipesSlugDeleteError, GetOneApiRecipesSlugGetData, GetOneApiRecipesSlugGetResponse, GetOneApiRecipesSlugGetError, PatchOneApiRecipesSlugPatchData, PatchOneApiRecipesSlugPatchError, UpdateOneApiRecipesSlugPutData, UpdateOneApiRecipesSlugPutError, DuplicateOneApiRecipesSlugDuplicatePostData, DuplicateOneApiRecipesSlugDuplicatePostResponse, DuplicateOneApiRecipesSlugDuplicatePostError, UpdateLastMadeApiRecipesSlugLastMadePatchData, UpdateLastMadeApiRecipesSlugLastMadePatchError, ScrapeImageUrlApiRecipesSlugImagePostData, ScrapeImageUrlApiRecipesSlugImagePostError, UpdateRecipeImageApiRecipesSlugImagePutData, UpdateRecipeImageApiRecipesSlugImagePutResponse, UpdateRecipeImageApiRecipesSlugImagePutError, UploadRecipeAssetApiRecipesSlugAssetsPostData, UploadRecipeAssetApiRecipesSlugAssetsPostResponse, UploadRecipeAssetApiRecipesSlugAssetsPostError, GetRecipeCommentsApiRecipesSlugCommentsGetData, GetRecipeCommentsApiRecipesSlugCommentsGetResponse, GetRecipeCommentsApiRecipesSlugCommentsGetError, BulkTagRecipesApiRecipesBulkActionsTagPostData, BulkTagRecipesApiRecipesBulkActionsTagPostError, BulkSettingsRecipesApiRecipesBulkActionsSettingsPostData, BulkSettingsRecipesApiRecipesBulkActionsSettingsPostError, BulkCategorizeRecipesApiRecipesBulkActionsCategorizePostData, BulkCategorizeRecipesApiRecipesBulkActionsCategorizePostError, BulkDeleteRecipesApiRecipesBulkActionsDeletePostData, BulkDeleteRecipesApiRecipesBulkActionsDeletePostError, GetExportedDataApiRecipesBulkActionsExportGetData, GetExportedDataApiRecipesBulkActionsExportGetResponse, GetExportedDataApiRecipesBulkActionsExportGetError, BulkExportRecipesApiRecipesBulkActionsExportPostData, BulkExportRecipesApiRecipesBulkActionsExportPostError, GetExportedDataTokenApiRecipesBulkActionsExportDownloadGetData, GetExportedDataTokenApiRecipesBulkActionsExportDownloadGetError, PurgeExportDataApiRecipesBulkActionsExportPurgeDeleteData, PurgeExportDataApiRecipesBulkActionsExportPurgeDeleteResponse, PurgeExportDataApiRecipesBulkActionsExportPurgeDeleteError, GetSharedRecipeApiRecipesSharedTokenIdGetData, GetSharedRecipeApiRecipesSharedTokenIdGetResponse, GetSharedRecipeApiRecipesSharedTokenIdGetError, GetAllApiRecipesTimelineEventsGetData, GetAllApiRecipesTimelineEventsGetResponse, GetAllApiRecipesTimelineEventsGetError, CreateOneApiRecipesTimelineEventsPostData, CreateOneApiRecipesTimelineEventsPostResponse, CreateOneApiRecipesTimelineEventsPostError, DeleteOneApiRecipesTimelineEventsItemIdDeleteData, DeleteOneApiRecipesTimelineEventsItemIdDeleteResponse, DeleteOneApiRecipesTimelineEventsItemIdDeleteError, GetOneApiRecipesTimelineEventsItemIdGetData, GetOneApiRecipesTimelineEventsItemIdGetResponse, GetOneApiRecipesTimelineEventsItemIdGetError, UpdateOneApiRecipesTimelineEventsItemIdPutData, UpdateOneApiRecipesTimelineEventsItemIdPutResponse, UpdateOneApiRecipesTimelineEventsItemIdPutError, UpdateEventImageApiRecipesTimelineEventsItemIdImagePutData, UpdateEventImageApiRecipesTimelineEventsItemIdImagePutResponse, UpdateEventImageApiRecipesTimelineEventsItemIdImagePutError, GetAllApiOrganizersCategoriesGetData, GetAllApiOrganizersCategoriesGetResponse, GetAllApiOrganizersCategoriesGetError, CreateOneApiOrganizersCategoriesPostData, CreateOneApiOrganizersCategoriesPostError, GetAllEmptyApiOrganizersCategoriesEmptyGetData, GetAllEmptyApiOrganizersCategoriesEmptyGetResponse, GetAllEmptyApiOrganizersCategoriesEmptyGetError, DeleteOneApiOrganizersCategoriesItemIdDeleteData, DeleteOneApiOrganizersCategoriesItemIdDeleteError, GetOneApiOrganizersCategoriesItemIdGetData, GetOneApiOrganizersCategoriesItemIdGetResponse, GetOneApiOrganizersCategoriesItemIdGetError, UpdateOneApiOrganizersCategoriesItemIdPutData, UpdateOneApiOrganizersCategoriesItemIdPutResponse, UpdateOneApiOrganizersCategoriesItemIdPutError, GetOneBySlugApiOrganizersCategoriesSlugCategorySlugGetData, GetOneBySlugApiOrganizersCategoriesSlugCategorySlugGetError, GetAllApiOrganizersTagsGetData, GetAllApiOrganizersTagsGetResponse, GetAllApiOrganizersTagsGetError, CreateOneApiOrganizersTagsPostData, CreateOneApiOrganizersTagsPostError, GetEmptyTagsApiOrganizersTagsEmptyGetData, GetEmptyTagsApiOrganizersTagsEmptyGetError, DeleteRecipeTagApiOrganizersTagsItemIdDeleteData, DeleteRecipeTagApiOrganizersTagsItemIdDeleteError, GetOneApiOrganizersTagsItemIdGetData, GetOneApiOrganizersTagsItemIdGetResponse, GetOneApiOrganizersTagsItemIdGetError, UpdateOneApiOrganizersTagsItemIdPutData, UpdateOneApiOrganizersTagsItemIdPutResponse, UpdateOneApiOrganizersTagsItemIdPutError, GetOneBySlugApiOrganizersTagsSlugTagSlugGetData, GetOneBySlugApiOrganizersTagsSlugTagSlugGetResponse, GetOneBySlugApiOrganizersTagsSlugTagSlugGetError, GetAllApiOrganizersToolsGetData, GetAllApiOrganizersToolsGetResponse, GetAllApiOrganizersToolsGetError, CreateOneApiOrganizersToolsPostData, CreateOneApiOrganizersToolsPostResponse, CreateOneApiOrganizersToolsPostError, DeleteOneApiOrganizersToolsItemIdDeleteData, DeleteOneApiOrganizersToolsItemIdDeleteResponse, DeleteOneApiOrganizersToolsItemIdDeleteError, GetOneApiOrganizersToolsItemIdGetData, GetOneApiOrganizersToolsItemIdGetResponse, GetOneApiOrganizersToolsItemIdGetError, UpdateOneApiOrganizersToolsItemIdPutData, UpdateOneApiOrganizersToolsItemIdPutResponse, UpdateOneApiOrganizersToolsItemIdPutError, GetOneBySlugApiOrganizersToolsSlugToolSlugGetData, GetOneBySlugApiOrganizersToolsSlugToolSlugGetResponse, GetOneBySlugApiOrganizersToolsSlugToolSlugGetError, GetAllApiSharedRecipesGetData, GetAllApiSharedRecipesGetResponse, GetAllApiSharedRecipesGetError, CreateOneApiSharedRecipesPostData, CreateOneApiSharedRecipesPostResponse, CreateOneApiSharedRecipesPostError, DeleteOneApiSharedRecipesItemIdDeleteData, DeleteOneApiSharedRecipesItemIdDeleteError, GetOneApiSharedRecipesItemIdGetData, GetOneApiSharedRecipesItemIdGetResponse, GetOneApiSharedRecipesItemIdGetError, GetAllApiCommentsGetData, GetAllApiCommentsGetResponse, GetAllApiCommentsGetError, CreateOneApiCommentsPostData, CreateOneApiCommentsPostResponse, CreateOneApiCommentsPostError, DeleteOneApiCommentsItemIdDeleteData, DeleteOneApiCommentsItemIdDeleteResponse, DeleteOneApiCommentsItemIdDeleteError, GetOneApiCommentsItemIdGetData, GetOneApiCommentsItemIdGetResponse, GetOneApiCommentsItemIdGetError, UpdateOneApiCommentsItemIdPutData, UpdateOneApiCommentsItemIdPutResponse, UpdateOneApiCommentsItemIdPutError, ParseIngredientApiParserIngredientPostData, ParseIngredientApiParserIngredientPostResponse, ParseIngredientApiParserIngredientPostError, ParseIngredientsApiParserIngredientsPostData, ParseIngredientsApiParserIngredientsPostResponse, ParseIngredientsApiParserIngredientsPostError, GetAllApiFoodsGetData, GetAllApiFoodsGetResponse, GetAllApiFoodsGetError, CreateOneApiFoodsPostData, CreateOneApiFoodsPostResponse, CreateOneApiFoodsPostError, MergeOneApiFoodsMergePutData, MergeOneApiFoodsMergePutResponse, MergeOneApiFoodsMergePutError, DeleteOneApiFoodsItemIdDeleteData, DeleteOneApiFoodsItemIdDeleteResponse, DeleteOneApiFoodsItemIdDeleteError, GetOneApiFoodsItemIdGetData, GetOneApiFoodsItemIdGetResponse, GetOneApiFoodsItemIdGetError, UpdateOneApiFoodsItemIdPutData, UpdateOneApiFoodsItemIdPutResponse, UpdateOneApiFoodsItemIdPutError, GetAllApiUnitsGetData, GetAllApiUnitsGetResponse, GetAllApiUnitsGetError, CreateOneApiUnitsPostData, CreateOneApiUnitsPostResponse, CreateOneApiUnitsPostError, MergeOneApiUnitsMergePutData, MergeOneApiUnitsMergePutResponse, MergeOneApiUnitsMergePutError, DeleteOneApiUnitsItemIdDeleteData, DeleteOneApiUnitsItemIdDeleteResponse, DeleteOneApiUnitsItemIdDeleteError, GetOneApiUnitsItemIdGetData, GetOneApiUnitsItemIdGetResponse, GetOneApiUnitsItemIdGetError, UpdateOneApiUnitsItemIdPutData, UpdateOneApiUnitsItemIdPutResponse, UpdateOneApiUnitsItemIdPutError, GetAppInfoApiAdminAboutGetData, GetAppInfoApiAdminAboutGetResponse, GetAppInfoApiAdminAboutGetError, GetAppStatisticsApiAdminAboutStatisticsGetData, GetAppStatisticsApiAdminAboutStatisticsGetResponse, GetAppStatisticsApiAdminAboutStatisticsGetError, CheckAppConfigApiAdminAboutCheckGetData, CheckAppConfigApiAdminAboutCheckGetResponse, CheckAppConfigApiAdminAboutCheckGetError, GetAllApiAdminUsersGetData, GetAllApiAdminUsersGetResponse, GetAllApiAdminUsersGetError, CreateOneApiAdminUsersPostData, CreateOneApiAdminUsersPostResponse, CreateOneApiAdminUsersPostError, UnlockUsersApiAdminUsersUnlockPostData, UnlockUsersApiAdminUsersUnlockPostResponse, UnlockUsersApiAdminUsersUnlockPostError, DeleteOneApiAdminUsersItemIdDeleteData, DeleteOneApiAdminUsersItemIdDeleteResponse, DeleteOneApiAdminUsersItemIdDeleteError, GetOneApiAdminUsersItemIdGetData, GetOneApiAdminUsersItemIdGetResponse, GetOneApiAdminUsersItemIdGetError, UpdateOneApiAdminUsersItemIdPutData, UpdateOneApiAdminUsersItemIdPutResponse, UpdateOneApiAdminUsersItemIdPutError, GenerateTokenApiAdminUsersPasswordResetTokenPostData, GenerateTokenApiAdminUsersPasswordResetTokenPostResponse, GenerateTokenApiAdminUsersPasswordResetTokenPostError, GetAllApiAdminHouseholdsGetData, GetAllApiAdminHouseholdsGetResponse, GetAllApiAdminHouseholdsGetError, CreateOneApiAdminHouseholdsPostData, CreateOneApiAdminHouseholdsPostResponse, CreateOneApiAdminHouseholdsPostError, DeleteOneApiAdminHouseholdsItemIdDeleteData, DeleteOneApiAdminHouseholdsItemIdDeleteResponse, DeleteOneApiAdminHouseholdsItemIdDeleteError, GetOneApiAdminHouseholdsItemIdGetData, GetOneApiAdminHouseholdsItemIdGetResponse, GetOneApiAdminHouseholdsItemIdGetError, UpdateOneApiAdminHouseholdsItemIdPutData, UpdateOneApiAdminHouseholdsItemIdPutResponse, UpdateOneApiAdminHouseholdsItemIdPutError, GetAllApiAdminGroupsGetData, GetAllApiAdminGroupsGetResponse, GetAllApiAdminGroupsGetError, CreateOneApiAdminGroupsPostData, CreateOneApiAdminGroupsPostResponse, CreateOneApiAdminGroupsPostError, DeleteOneApiAdminGroupsItemIdDeleteData, DeleteOneApiAdminGroupsItemIdDeleteResponse, DeleteOneApiAdminGroupsItemIdDeleteError, GetOneApiAdminGroupsItemIdGetData, GetOneApiAdminGroupsItemIdGetResponse, GetOneApiAdminGroupsItemIdGetError, UpdateOneApiAdminGroupsItemIdPutData, UpdateOneApiAdminGroupsItemIdPutResponse, UpdateOneApiAdminGroupsItemIdPutError, CheckEmailConfigApiAdminEmailGetData, CheckEmailConfigApiAdminEmailGetResponse, CheckEmailConfigApiAdminEmailGetError, SendTestEmailApiAdminEmailPostData, SendTestEmailApiAdminEmailPostResponse, SendTestEmailApiAdminEmailPostError, GetAllApiAdminBackupsGetData, GetAllApiAdminBackupsGetResponse, GetAllApiAdminBackupsGetError, CreateOneApiAdminBackupsPostData, CreateOneApiAdminBackupsPostResponse, CreateOneApiAdminBackupsPostError, DeleteOneApiAdminBackupsFileNameDeleteData, DeleteOneApiAdminBackupsFileNameDeleteResponse, DeleteOneApiAdminBackupsFileNameDeleteError, GetOneApiAdminBackupsFileNameGetData, GetOneApiAdminBackupsFileNameGetResponse, GetOneApiAdminBackupsFileNameGetError, UploadOneApiAdminBackupsUploadPostData, UploadOneApiAdminBackupsUploadPostResponse, UploadOneApiAdminBackupsUploadPostError, ImportOneApiAdminBackupsFileNameRestorePostData, ImportOneApiAdminBackupsFileNameRestorePostResponse, ImportOneApiAdminBackupsFileNameRestorePostError, GetMaintenanceSummaryApiAdminMaintenanceGetData, GetMaintenanceSummaryApiAdminMaintenanceGetResponse, GetMaintenanceSummaryApiAdminMaintenanceGetError, GetStorageDetailsApiAdminMaintenanceStorageGetData, GetStorageDetailsApiAdminMaintenanceStorageGetResponse, GetStorageDetailsApiAdminMaintenanceStorageGetError, CleanImagesApiAdminMaintenanceCleanImagesPostData, CleanImagesApiAdminMaintenanceCleanImagesPostResponse, CleanImagesApiAdminMaintenanceCleanImagesPostError, CleanTempApiAdminMaintenanceCleanTempPostData, CleanTempApiAdminMaintenanceCleanTempPostResponse, CleanTempApiAdminMaintenanceCleanTempPostError, CleanRecipeFoldersApiAdminMaintenanceCleanRecipeFoldersPostData, CleanRecipeFoldersApiAdminMaintenanceCleanRecipeFoldersPostResponse, CleanRecipeFoldersApiAdminMaintenanceCleanRecipeFoldersPostError, DebugOpenaiApiAdminDebugOpenaiPostData, DebugOpenaiApiAdminDebugOpenaiPostResponse, DebugOpenaiApiAdminDebugOpenaiPostError, GetAllApiExploreGroupsGroupSlugFoodsGetData, GetAllApiExploreGroupsGroupSlugFoodsGetResponse, GetAllApiExploreGroupsGroupSlugFoodsGetError, GetOneApiExploreGroupsGroupSlugFoodsItemIdGetData, GetOneApiExploreGroupsGroupSlugFoodsItemIdGetResponse, GetOneApiExploreGroupsGroupSlugFoodsItemIdGetError, GetAllApiExploreGroupsGroupSlugHouseholdsGetData, GetAllApiExploreGroupsGroupSlugHouseholdsGetResponse, GetAllApiExploreGroupsGroupSlugHouseholdsGetError, GetHouseholdApiExploreGroupsGroupSlugHouseholdsHouseholdSlugGetData, GetHouseholdApiExploreGroupsGroupSlugHouseholdsHouseholdSlugGetResponse, GetHouseholdApiExploreGroupsGroupSlugHouseholdsHouseholdSlugGetError, GetAllApiExploreGroupsGroupSlugOrganizersCategoriesGetData, GetAllApiExploreGroupsGroupSlugOrganizersCategoriesGetResponse, GetAllApiExploreGroupsGroupSlugOrganizersCategoriesGetError, GetOneApiExploreGroupsGroupSlugOrganizersCategoriesItemIdGetData, GetOneApiExploreGroupsGroupSlugOrganizersCategoriesItemIdGetResponse, GetOneApiExploreGroupsGroupSlugOrganizersCategoriesItemIdGetError, GetAllApiExploreGroupsGroupSlugOrganizersTagsGetData, GetAllApiExploreGroupsGroupSlugOrganizersTagsGetResponse, GetAllApiExploreGroupsGroupSlugOrganizersTagsGetError, GetOneApiExploreGroupsGroupSlugOrganizersTagsItemIdGetData, GetOneApiExploreGroupsGroupSlugOrganizersTagsItemIdGetResponse, GetOneApiExploreGroupsGroupSlugOrganizersTagsItemIdGetError, GetAllApiExploreGroupsGroupSlugOrganizersToolsGetData, GetAllApiExploreGroupsGroupSlugOrganizersToolsGetResponse, GetAllApiExploreGroupsGroupSlugOrganizersToolsGetError, GetOneApiExploreGroupsGroupSlugOrganizersToolsItemIdGetData, GetOneApiExploreGroupsGroupSlugOrganizersToolsItemIdGetResponse, GetOneApiExploreGroupsGroupSlugOrganizersToolsItemIdGetError, GetAllApiExploreGroupsGroupSlugCookbooksGetData, GetAllApiExploreGroupsGroupSlugCookbooksGetResponse, GetAllApiExploreGroupsGroupSlugCookbooksGetError, GetOneApiExploreGroupsGroupSlugCookbooksItemIdGetData, GetOneApiExploreGroupsGroupSlugCookbooksItemIdGetResponse, GetOneApiExploreGroupsGroupSlugCookbooksItemIdGetError, GetAllApiExploreGroupsGroupSlugRecipesGetData, GetAllApiExploreGroupsGroupSlugRecipesGetResponse, GetAllApiExploreGroupsGroupSlugRecipesGetError, SuggestRecipesApiExploreGroupsGroupSlugRecipesSuggestionsGetData, SuggestRecipesApiExploreGroupsGroupSlugRecipesSuggestionsGetResponse, SuggestRecipesApiExploreGroupsGroupSlugRecipesSuggestionsGetError, GetRecipeApiExploreGroupsGroupSlugRecipesRecipeSlugGetData, GetRecipeApiExploreGroupsGroupSlugRecipesRecipeSlugGetResponse, GetRecipeApiExploreGroupsGroupSlugRecipesRecipeSlugGetError, GetRecipeImgApiMediaRecipesRecipeIdImagesFileNameGetData, GetRecipeImgApiMediaRecipesRecipeIdImagesFileNameGetError, GetRecipeTimelineEventImgApiMediaRecipesRecipeIdImagesTimelineTimelineEventIdFileNameGetData, GetRecipeTimelineEventImgApiMediaRecipesRecipeIdImagesTimelineTimelineEventIdFileNameGetError, GetRecipeAssetApiMediaRecipesRecipeIdAssetsFileNameGetData, GetRecipeAssetApiMediaRecipesRecipeIdAssetsFileNameGetError, GetUserImageApiMediaUsersUserIdFileNameGetData, GetUserImageApiMediaUsersUserIdFileNameGetError, GetValidationTextApiMediaDockerValidateTxtGetData, DownloadFileApiUtilsDownloadGetData, DownloadFileApiUtilsDownloadGetError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get App Info
 * Get general application information
 */
export const getAppInfoApiAppAboutGet = <ThrowOnError extends boolean = false>(options?: Options<GetAppInfoApiAppAboutGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAppInfoApiAppAboutGetResponse, unknown, ThrowOnError>({
        url: '/api/app/about',
        ...options
    });
};

/**
 * Get Startup Info
 * returns helpful startup information
 */
export const getStartupInfoApiAppAboutStartupInfoGet = <ThrowOnError extends boolean = false>(options?: Options<GetStartupInfoApiAppAboutStartupInfoGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStartupInfoApiAppAboutStartupInfoGetResponse, unknown, ThrowOnError>({
        url: '/api/app/about/startup-info',
        ...options
    });
};

/**
 * Get App Theme
 * Get's the current theme settings
 */
export const getAppThemeApiAppAboutThemeGet = <ThrowOnError extends boolean = false>(options?: Options<GetAppThemeApiAppAboutThemeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAppThemeApiAppAboutThemeGetResponse, unknown, ThrowOnError>({
        url: '/api/app/about/theme',
        ...options
    });
};

/**
 * Get Token
 */
export const getTokenApiAuthTokenPost = <ThrowOnError extends boolean = false>(options?: Options<GetTokenApiAuthTokenPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, GetTokenApiAuthTokenPostError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/auth/token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Oauth Login
 */
export const oauthLoginApiAuthOauthGet = <ThrowOnError extends boolean = false>(options?: Options<OauthLoginApiAuthOauthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/auth/oauth',
        ...options
    });
};

/**
 * Oauth Callback
 */
export const oauthCallbackApiAuthOauthCallbackGet = <ThrowOnError extends boolean = false>(options?: Options<OauthCallbackApiAuthOauthCallbackGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/auth/oauth/callback',
        ...options
    });
};

/**
 * Refresh Token
 * Use a valid token to get another token
 */
export const refreshTokenApiAuthRefreshGet = <ThrowOnError extends boolean = false>(options?: Options<RefreshTokenApiAuthRefreshGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/refresh',
        ...options
    });
};

/**
 * Logout
 */
export const logoutApiAuthLogoutPost = <ThrowOnError extends boolean = false>(options?: Options<LogoutApiAuthLogoutPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/logout',
        ...options
    });
};

/**
 * Register New User
 */
export const registerNewUserApiUsersRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterNewUserApiUsersRegisterPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterNewUserApiUsersRegisterPostResponse, RegisterNewUserApiUsersRegisterPostError, ThrowOnError>({
        url: '/api/users/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Logged In User
 */
export const getLoggedInUserApiUsersSelfGet = <ThrowOnError extends boolean = false>(options?: Options<GetLoggedInUserApiUsersSelfGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLoggedInUserApiUsersSelfGetResponse, GetLoggedInUserApiUsersSelfGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/self',
        ...options
    });
};

/**
 * Get Logged In User Ratings
 */
export const getLoggedInUserRatingsApiUsersSelfRatingsGet = <ThrowOnError extends boolean = false>(options?: Options<GetLoggedInUserRatingsApiUsersSelfRatingsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLoggedInUserRatingsApiUsersSelfRatingsGetResponse, GetLoggedInUserRatingsApiUsersSelfRatingsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/self/ratings',
        ...options
    });
};

/**
 * Get Logged In User Rating For Recipe
 */
export const getLoggedInUserRatingForRecipeApiUsersSelfRatingsRecipeIdGet = <ThrowOnError extends boolean = false>(options: Options<GetLoggedInUserRatingForRecipeApiUsersSelfRatingsRecipeIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLoggedInUserRatingForRecipeApiUsersSelfRatingsRecipeIdGetResponse, GetLoggedInUserRatingForRecipeApiUsersSelfRatingsRecipeIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/self/ratings/{recipe_id}',
        ...options
    });
};

/**
 * Get Logged In User Favorites
 */
export const getLoggedInUserFavoritesApiUsersSelfFavoritesGet = <ThrowOnError extends boolean = false>(options?: Options<GetLoggedInUserFavoritesApiUsersSelfFavoritesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLoggedInUserFavoritesApiUsersSelfFavoritesGetResponse, GetLoggedInUserFavoritesApiUsersSelfFavoritesGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/self/favorites',
        ...options
    });
};

/**
 * Update Password
 * Resets the User Password
 */
export const updatePasswordApiUsersPasswordPut = <ThrowOnError extends boolean = false>(options: Options<UpdatePasswordApiUsersPasswordPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdatePasswordApiUsersPasswordPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete User
 */
export const deleteUserApiUsersItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUserApiUsersItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteUserApiUsersItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{item_id}',
        ...options
    });
};

/**
 * Get User
 */
export const getUserApiUsersItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserApiUsersItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserApiUsersItemIdGetResponse, GetUserApiUsersItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{item_id}',
        ...options
    });
};

/**
 * Update User
 */
export const updateUserApiUsersItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateUserApiUsersItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateUserApiUsersItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get All
 * Returns all users from all groups
 */
export const getAllApiUsersGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiUsersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiUsersGetResponse, GetAllApiUsersGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users',
        ...options
    });
};

/**
 * Create User
 */
export const createUserApiUsersPost = <ThrowOnError extends boolean = false>(options: Options<CreateUserApiUsersPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserApiUsersPostResponse, CreateUserApiUsersPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Forgot Password
 * Sends an email with a reset link to the user
 */
export const forgotPasswordApiUsersForgotPasswordPost = <ThrowOnError extends boolean = false>(options: Options<ForgotPasswordApiUsersForgotPasswordPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, ForgotPasswordApiUsersForgotPasswordPostError, ThrowOnError>({
        url: '/api/users/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reset Password
 * Resets the user password
 */
export const resetPasswordApiUsersResetPasswordPost = <ThrowOnError extends boolean = false>(options: Options<ResetPasswordApiUsersResetPasswordPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, ResetPasswordApiUsersResetPasswordPostError, ThrowOnError>({
        url: '/api/users/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update User Image
 * Updates a User Image
 */
export const updateUserImageApiUsersIdImagePost = <ThrowOnError extends boolean = false>(options: Options<UpdateUserImageApiUsersIdImagePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, UpdateUserImageApiUsersIdImagePostError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{id}/image',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Create Api Token
 * Create api_token in the Database
 */
export const createApiTokenApiUsersApiTokensPost = <ThrowOnError extends boolean = false>(options: Options<CreateApiTokenApiUsersApiTokensPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateApiTokenApiUsersApiTokensPostResponse, CreateApiTokenApiUsersApiTokensPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/api-tokens',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Api Token
 * Delete api_token from the Database
 */
export const deleteApiTokenApiUsersApiTokensTokenIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteApiTokenApiUsersApiTokensTokenIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiTokenApiUsersApiTokensTokenIdDeleteResponse, DeleteApiTokenApiUsersApiTokensTokenIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/api-tokens/{token_id}',
        ...options
    });
};

/**
 * Get Ratings
 * Get user's rated recipes
 */
export const getRatingsApiUsersIdRatingsGet = <ThrowOnError extends boolean = false>(options: Options<GetRatingsApiUsersIdRatingsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRatingsApiUsersIdRatingsGetResponse, GetRatingsApiUsersIdRatingsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{id}/ratings',
        ...options
    });
};

/**
 * Get Favorites
 * Get user's favorited recipes
 */
export const getFavoritesApiUsersIdFavoritesGet = <ThrowOnError extends boolean = false>(options: Options<GetFavoritesApiUsersIdFavoritesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFavoritesApiUsersIdFavoritesGetResponse, GetFavoritesApiUsersIdFavoritesGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{id}/favorites',
        ...options
    });
};

/**
 * Set Rating
 * Sets the user's rating for a recipe
 */
export const setRatingApiUsersIdRatingsSlugPost = <ThrowOnError extends boolean = false>(options: Options<SetRatingApiUsersIdRatingsSlugPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, SetRatingApiUsersIdRatingsSlugPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{id}/ratings/{slug}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove Favorite
 * Removes a recipe from the user's favorites
 */
export const removeFavoriteApiUsersIdFavoritesSlugDelete = <ThrowOnError extends boolean = false>(options: Options<RemoveFavoriteApiUsersIdFavoritesSlugDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, RemoveFavoriteApiUsersIdFavoritesSlugDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{id}/favorites/{slug}',
        ...options
    });
};

/**
 * Add Favorite
 * Adds a recipe to the user's favorites
 */
export const addFavoriteApiUsersIdFavoritesSlugPost = <ThrowOnError extends boolean = false>(options: Options<AddFavoriteApiUsersIdFavoritesSlugPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AddFavoriteApiUsersIdFavoritesSlugPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{id}/favorites/{slug}',
        ...options
    });
};

/**
 * Get All
 */
export const getAllApiHouseholdsCookbooksGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiHouseholdsCookbooksGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiHouseholdsCookbooksGetResponse, GetAllApiHouseholdsCookbooksGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/cookbooks',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiHouseholdsCookbooksPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiHouseholdsCookbooksPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiHouseholdsCookbooksPostResponse, CreateOneApiHouseholdsCookbooksPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/cookbooks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update Many
 */
export const updateManyApiHouseholdsCookbooksPut = <ThrowOnError extends boolean = false>(options: Options<UpdateManyApiHouseholdsCookbooksPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateManyApiHouseholdsCookbooksPutResponse, UpdateManyApiHouseholdsCookbooksPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/cookbooks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete One
 */
export const deleteOneApiHouseholdsCookbooksItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiHouseholdsCookbooksItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiHouseholdsCookbooksItemIdDeleteResponse, DeleteOneApiHouseholdsCookbooksItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/cookbooks/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiHouseholdsCookbooksItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiHouseholdsCookbooksItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiHouseholdsCookbooksItemIdGetResponse, GetOneApiHouseholdsCookbooksItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/cookbooks/{item_id}',
        ...options
    });
};

/**
 * Update One
 */
export const updateOneApiHouseholdsCookbooksItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiHouseholdsCookbooksItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiHouseholdsCookbooksItemIdPutResponse, UpdateOneApiHouseholdsCookbooksItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/cookbooks/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get All
 */
export const getAllApiHouseholdsEventsNotificationsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiHouseholdsEventsNotificationsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiHouseholdsEventsNotificationsGetResponse, GetAllApiHouseholdsEventsNotificationsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/events/notifications',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiHouseholdsEventsNotificationsPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiHouseholdsEventsNotificationsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiHouseholdsEventsNotificationsPostResponse, CreateOneApiHouseholdsEventsNotificationsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/events/notifications',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete One
 */
export const deleteOneApiHouseholdsEventsNotificationsItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiHouseholdsEventsNotificationsItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiHouseholdsEventsNotificationsItemIdDeleteResponse, DeleteOneApiHouseholdsEventsNotificationsItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/events/notifications/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiHouseholdsEventsNotificationsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiHouseholdsEventsNotificationsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiHouseholdsEventsNotificationsItemIdGetResponse, GetOneApiHouseholdsEventsNotificationsItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/events/notifications/{item_id}',
        ...options
    });
};

/**
 * Update One
 */
export const updateOneApiHouseholdsEventsNotificationsItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiHouseholdsEventsNotificationsItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiHouseholdsEventsNotificationsItemIdPutResponse, UpdateOneApiHouseholdsEventsNotificationsItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/events/notifications/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Test Notification
 */
export const testNotificationApiHouseholdsEventsNotificationsItemIdTestPost = <ThrowOnError extends boolean = false>(options: Options<TestNotificationApiHouseholdsEventsNotificationsItemIdTestPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TestNotificationApiHouseholdsEventsNotificationsItemIdTestPostResponse, TestNotificationApiHouseholdsEventsNotificationsItemIdTestPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/events/notifications/{item_id}/test',
        ...options
    });
};

/**
 * Get All
 */
export const getAllApiHouseholdsRecipeActionsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiHouseholdsRecipeActionsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiHouseholdsRecipeActionsGetResponse, GetAllApiHouseholdsRecipeActionsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/recipe-actions',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiHouseholdsRecipeActionsPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiHouseholdsRecipeActionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiHouseholdsRecipeActionsPostResponse, CreateOneApiHouseholdsRecipeActionsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/recipe-actions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete One
 */
export const deleteOneApiHouseholdsRecipeActionsItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiHouseholdsRecipeActionsItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiHouseholdsRecipeActionsItemIdDeleteResponse, DeleteOneApiHouseholdsRecipeActionsItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/recipe-actions/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiHouseholdsRecipeActionsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiHouseholdsRecipeActionsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiHouseholdsRecipeActionsItemIdGetResponse, GetOneApiHouseholdsRecipeActionsItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/recipe-actions/{item_id}',
        ...options
    });
};

/**
 * Update One
 */
export const updateOneApiHouseholdsRecipeActionsItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiHouseholdsRecipeActionsItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiHouseholdsRecipeActionsItemIdPutResponse, UpdateOneApiHouseholdsRecipeActionsItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/recipe-actions/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Trigger Action
 */
export const triggerActionApiHouseholdsRecipeActionsItemIdTriggerRecipeSlugPost = <ThrowOnError extends boolean = false>(options: Options<TriggerActionApiHouseholdsRecipeActionsItemIdTriggerRecipeSlugPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, TriggerActionApiHouseholdsRecipeActionsItemIdTriggerRecipeSlugPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/recipe-actions/{item_id}/trigger/{recipe_slug}',
        ...options
    });
};

/**
 * Get Logged In User Household
 * Returns the Household Data for the Current User
 */
export const getLoggedInUserHouseholdApiHouseholdsSelfGet = <ThrowOnError extends boolean = false>(options?: Options<GetLoggedInUserHouseholdApiHouseholdsSelfGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLoggedInUserHouseholdApiHouseholdsSelfGetResponse, GetLoggedInUserHouseholdApiHouseholdsSelfGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/self',
        ...options
    });
};

/**
 * Get Household Recipe
 * Returns recipe data for the current household
 */
export const getHouseholdRecipeApiHouseholdsSelfRecipesRecipeSlugGet = <ThrowOnError extends boolean = false>(options: Options<GetHouseholdRecipeApiHouseholdsSelfRecipesRecipeSlugGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetHouseholdRecipeApiHouseholdsSelfRecipesRecipeSlugGetResponse, GetHouseholdRecipeApiHouseholdsSelfRecipesRecipeSlugGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/self/recipes/{recipe_slug}',
        ...options
    });
};

/**
 * Get Household Members
 * Returns all users belonging to the current household
 */
export const getHouseholdMembersApiHouseholdsMembersGet = <ThrowOnError extends boolean = false>(options?: Options<GetHouseholdMembersApiHouseholdsMembersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHouseholdMembersApiHouseholdsMembersGetResponse, GetHouseholdMembersApiHouseholdsMembersGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/members',
        ...options
    });
};

/**
 * Get Household Preferences
 */
export const getHouseholdPreferencesApiHouseholdsPreferencesGet = <ThrowOnError extends boolean = false>(options?: Options<GetHouseholdPreferencesApiHouseholdsPreferencesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHouseholdPreferencesApiHouseholdsPreferencesGetResponse, GetHouseholdPreferencesApiHouseholdsPreferencesGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/preferences',
        ...options
    });
};

/**
 * Update Household Preferences
 */
export const updateHouseholdPreferencesApiHouseholdsPreferencesPut = <ThrowOnError extends boolean = false>(options: Options<UpdateHouseholdPreferencesApiHouseholdsPreferencesPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateHouseholdPreferencesApiHouseholdsPreferencesPutResponse, UpdateHouseholdPreferencesApiHouseholdsPreferencesPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/preferences',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Set Member Permissions
 */
export const setMemberPermissionsApiHouseholdsPermissionsPut = <ThrowOnError extends boolean = false>(options: Options<SetMemberPermissionsApiHouseholdsPermissionsPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SetMemberPermissionsApiHouseholdsPermissionsPutResponse, SetMemberPermissionsApiHouseholdsPermissionsPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Statistics
 */
export const getStatisticsApiHouseholdsStatisticsGet = <ThrowOnError extends boolean = false>(options?: Options<GetStatisticsApiHouseholdsStatisticsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStatisticsApiHouseholdsStatisticsGetResponse, GetStatisticsApiHouseholdsStatisticsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/statistics',
        ...options
    });
};

/**
 * Get Invite Tokens
 */
export const getInviteTokensApiHouseholdsInvitationsGet = <ThrowOnError extends boolean = false>(options?: Options<GetInviteTokensApiHouseholdsInvitationsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetInviteTokensApiHouseholdsInvitationsGetResponse, GetInviteTokensApiHouseholdsInvitationsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/invitations',
        ...options
    });
};

/**
 * Create Invite Token
 */
export const createInviteTokenApiHouseholdsInvitationsPost = <ThrowOnError extends boolean = false>(options: Options<CreateInviteTokenApiHouseholdsInvitationsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateInviteTokenApiHouseholdsInvitationsPostResponse, CreateInviteTokenApiHouseholdsInvitationsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/invitations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Email Invitation
 */
export const emailInvitationApiHouseholdsInvitationsEmailPost = <ThrowOnError extends boolean = false>(options: Options<EmailInvitationApiHouseholdsInvitationsEmailPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EmailInvitationApiHouseholdsInvitationsEmailPostResponse, EmailInvitationApiHouseholdsInvitationsEmailPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/invitations/email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get All
 */
export const getAllApiHouseholdsShoppingListsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiHouseholdsShoppingListsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiHouseholdsShoppingListsGetResponse, GetAllApiHouseholdsShoppingListsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/shopping/lists',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiHouseholdsShoppingListsPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiHouseholdsShoppingListsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiHouseholdsShoppingListsPostResponse, CreateOneApiHouseholdsShoppingListsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/shopping/lists',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete One
 */
export const deleteOneApiHouseholdsShoppingListsItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiHouseholdsShoppingListsItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiHouseholdsShoppingListsItemIdDeleteResponse, DeleteOneApiHouseholdsShoppingListsItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/shopping/lists/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiHouseholdsShoppingListsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiHouseholdsShoppingListsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiHouseholdsShoppingListsItemIdGetResponse, GetOneApiHouseholdsShoppingListsItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/shopping/lists/{item_id}',
        ...options
    });
};

/**
 * Update One
 */
export const updateOneApiHouseholdsShoppingListsItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiHouseholdsShoppingListsItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiHouseholdsShoppingListsItemIdPutResponse, UpdateOneApiHouseholdsShoppingListsItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/shopping/lists/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update Label Settings
 */
export const updateLabelSettingsApiHouseholdsShoppingListsItemIdLabelSettingsPut = <ThrowOnError extends boolean = false>(options: Options<UpdateLabelSettingsApiHouseholdsShoppingListsItemIdLabelSettingsPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateLabelSettingsApiHouseholdsShoppingListsItemIdLabelSettingsPutResponse, UpdateLabelSettingsApiHouseholdsShoppingListsItemIdLabelSettingsPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/shopping/lists/{item_id}/label-settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add Recipe Ingredients To List
 */
export const addRecipeIngredientsToListApiHouseholdsShoppingListsItemIdRecipePost = <ThrowOnError extends boolean = false>(options: Options<AddRecipeIngredientsToListApiHouseholdsShoppingListsItemIdRecipePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddRecipeIngredientsToListApiHouseholdsShoppingListsItemIdRecipePostResponse, AddRecipeIngredientsToListApiHouseholdsShoppingListsItemIdRecipePostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/shopping/lists/{item_id}/recipe',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 * Add Single Recipe Ingredients To List
 */
export const addSingleRecipeIngredientsToListApiHouseholdsShoppingListsItemIdRecipeRecipeIdPost = <ThrowOnError extends boolean = false>(options: Options<AddSingleRecipeIngredientsToListApiHouseholdsShoppingListsItemIdRecipeRecipeIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddSingleRecipeIngredientsToListApiHouseholdsShoppingListsItemIdRecipeRecipeIdPostResponse, AddSingleRecipeIngredientsToListApiHouseholdsShoppingListsItemIdRecipeRecipeIdPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/shopping/lists/{item_id}/recipe/{recipe_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove Recipe Ingredients From List
 */
export const removeRecipeIngredientsFromListApiHouseholdsShoppingListsItemIdRecipeRecipeIdDeletePost = <ThrowOnError extends boolean = false>(options: Options<RemoveRecipeIngredientsFromListApiHouseholdsShoppingListsItemIdRecipeRecipeIdDeletePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoveRecipeIngredientsFromListApiHouseholdsShoppingListsItemIdRecipeRecipeIdDeletePostResponse, RemoveRecipeIngredientsFromListApiHouseholdsShoppingListsItemIdRecipeRecipeIdDeletePostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/shopping/lists/{item_id}/recipe/{recipe_id}/delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Many
 */
export const deleteManyApiHouseholdsShoppingItemsDelete = <ThrowOnError extends boolean = false>(options?: Options<DeleteManyApiHouseholdsShoppingItemsDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteManyApiHouseholdsShoppingItemsDeleteResponse, DeleteManyApiHouseholdsShoppingItemsDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/shopping/items',
        ...options
    });
};

/**
 * Get All
 */
export const getAllApiHouseholdsShoppingItemsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiHouseholdsShoppingItemsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiHouseholdsShoppingItemsGetResponse, GetAllApiHouseholdsShoppingItemsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/shopping/items',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiHouseholdsShoppingItemsPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiHouseholdsShoppingItemsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiHouseholdsShoppingItemsPostResponse, CreateOneApiHouseholdsShoppingItemsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/shopping/items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update Many
 */
export const updateManyApiHouseholdsShoppingItemsPut = <ThrowOnError extends boolean = false>(options: Options<UpdateManyApiHouseholdsShoppingItemsPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateManyApiHouseholdsShoppingItemsPutResponse, UpdateManyApiHouseholdsShoppingItemsPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/shopping/items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Many
 */
export const createManyApiHouseholdsShoppingItemsCreateBulkPost = <ThrowOnError extends boolean = false>(options: Options<CreateManyApiHouseholdsShoppingItemsCreateBulkPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateManyApiHouseholdsShoppingItemsCreateBulkPostResponse, CreateManyApiHouseholdsShoppingItemsCreateBulkPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/shopping/items/create-bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete One
 */
export const deleteOneApiHouseholdsShoppingItemsItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiHouseholdsShoppingItemsItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiHouseholdsShoppingItemsItemIdDeleteResponse, DeleteOneApiHouseholdsShoppingItemsItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/shopping/items/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiHouseholdsShoppingItemsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiHouseholdsShoppingItemsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiHouseholdsShoppingItemsItemIdGetResponse, GetOneApiHouseholdsShoppingItemsItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/shopping/items/{item_id}',
        ...options
    });
};

/**
 * Update One
 */
export const updateOneApiHouseholdsShoppingItemsItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiHouseholdsShoppingItemsItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiHouseholdsShoppingItemsItemIdPutResponse, UpdateOneApiHouseholdsShoppingItemsItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/shopping/items/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get All
 */
export const getAllApiHouseholdsWebhooksGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiHouseholdsWebhooksGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiHouseholdsWebhooksGetResponse, GetAllApiHouseholdsWebhooksGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/webhooks',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiHouseholdsWebhooksPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiHouseholdsWebhooksPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiHouseholdsWebhooksPostResponse, CreateOneApiHouseholdsWebhooksPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/webhooks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Rerun Webhooks
 * Manually re-fires all previously scheduled webhooks for today
 */
export const rerunWebhooksApiHouseholdsWebhooksRerunPost = <ThrowOnError extends boolean = false>(options?: Options<RerunWebhooksApiHouseholdsWebhooksRerunPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, RerunWebhooksApiHouseholdsWebhooksRerunPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/webhooks/rerun',
        ...options
    });
};

/**
 * Delete One
 */
export const deleteOneApiHouseholdsWebhooksItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiHouseholdsWebhooksItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiHouseholdsWebhooksItemIdDeleteResponse, DeleteOneApiHouseholdsWebhooksItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/webhooks/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiHouseholdsWebhooksItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiHouseholdsWebhooksItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiHouseholdsWebhooksItemIdGetResponse, GetOneApiHouseholdsWebhooksItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/webhooks/{item_id}',
        ...options
    });
};

/**
 * Update One
 */
export const updateOneApiHouseholdsWebhooksItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiHouseholdsWebhooksItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiHouseholdsWebhooksItemIdPutResponse, UpdateOneApiHouseholdsWebhooksItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/webhooks/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Test One
 */
export const testOneApiHouseholdsWebhooksItemIdTestPost = <ThrowOnError extends boolean = false>(options: Options<TestOneApiHouseholdsWebhooksItemIdTestPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, TestOneApiHouseholdsWebhooksItemIdTestPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/webhooks/{item_id}/test',
        ...options
    });
};

/**
 * Get All
 */
export const getAllApiHouseholdsMealplansRulesGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiHouseholdsMealplansRulesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiHouseholdsMealplansRulesGetResponse, GetAllApiHouseholdsMealplansRulesGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/mealplans/rules',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiHouseholdsMealplansRulesPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiHouseholdsMealplansRulesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiHouseholdsMealplansRulesPostResponse, CreateOneApiHouseholdsMealplansRulesPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/mealplans/rules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete One
 */
export const deleteOneApiHouseholdsMealplansRulesItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiHouseholdsMealplansRulesItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiHouseholdsMealplansRulesItemIdDeleteResponse, DeleteOneApiHouseholdsMealplansRulesItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/mealplans/rules/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiHouseholdsMealplansRulesItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiHouseholdsMealplansRulesItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiHouseholdsMealplansRulesItemIdGetResponse, GetOneApiHouseholdsMealplansRulesItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/mealplans/rules/{item_id}',
        ...options
    });
};

/**
 * Update One
 */
export const updateOneApiHouseholdsMealplansRulesItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiHouseholdsMealplansRulesItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiHouseholdsMealplansRulesItemIdPutResponse, UpdateOneApiHouseholdsMealplansRulesItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/mealplans/rules/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get All
 */
export const getAllApiHouseholdsMealplansGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiHouseholdsMealplansGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiHouseholdsMealplansGetResponse, GetAllApiHouseholdsMealplansGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/mealplans',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiHouseholdsMealplansPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiHouseholdsMealplansPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiHouseholdsMealplansPostResponse, CreateOneApiHouseholdsMealplansPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/mealplans',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Todays Meals
 */
export const getTodaysMealsApiHouseholdsMealplansTodayGet = <ThrowOnError extends boolean = false>(options?: Options<GetTodaysMealsApiHouseholdsMealplansTodayGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, GetTodaysMealsApiHouseholdsMealplansTodayGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/mealplans/today',
        ...options
    });
};

/**
 * Create Random Meal
 * `create_random_meal` is a route that provides the randomized functionality for mealplaners.
 * It operates by following the rules set out in the household's mealplan settings. If no settings
 * are set, it will return any random meal.
 *
 * Refer to the mealplan settings routes for more information on how rules can be applied
 * to the random meal selector.
 */
export const createRandomMealApiHouseholdsMealplansRandomPost = <ThrowOnError extends boolean = false>(options: Options<CreateRandomMealApiHouseholdsMealplansRandomPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRandomMealApiHouseholdsMealplansRandomPostResponse, CreateRandomMealApiHouseholdsMealplansRandomPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/mealplans/random',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete One
 */
export const deleteOneApiHouseholdsMealplansItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiHouseholdsMealplansItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiHouseholdsMealplansItemIdDeleteResponse, DeleteOneApiHouseholdsMealplansItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/mealplans/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiHouseholdsMealplansItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiHouseholdsMealplansItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiHouseholdsMealplansItemIdGetResponse, GetOneApiHouseholdsMealplansItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/mealplans/{item_id}',
        ...options
    });
};

/**
 * Update One
 */
export const updateOneApiHouseholdsMealplansItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiHouseholdsMealplansItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiHouseholdsMealplansItemIdPutResponse, UpdateOneApiHouseholdsMealplansItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/households/mealplans/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get All Households
 */
export const getAllHouseholdsApiGroupsHouseholdsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllHouseholdsApiGroupsHouseholdsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllHouseholdsApiGroupsHouseholdsGetResponse, GetAllHouseholdsApiGroupsHouseholdsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/households',
        ...options
    });
};

/**
 * Get One Household
 */
export const getOneHouseholdApiGroupsHouseholdsHouseholdSlugGet = <ThrowOnError extends boolean = false>(options: Options<GetOneHouseholdApiGroupsHouseholdsHouseholdSlugGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneHouseholdApiGroupsHouseholdsHouseholdSlugGetResponse, GetOneHouseholdApiGroupsHouseholdsHouseholdSlugGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/households/{household_slug}',
        ...options
    });
};

/**
 * Get Logged In User Group
 * Returns the Group Data for the Current User
 */
export const getLoggedInUserGroupApiGroupsSelfGet = <ThrowOnError extends boolean = false>(options?: Options<GetLoggedInUserGroupApiGroupsSelfGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLoggedInUserGroupApiGroupsSelfGetResponse, GetLoggedInUserGroupApiGroupsSelfGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/self',
        ...options
    });
};

/**
 * Get Group Members
 * Returns all users belonging to the current group
 */
export const getGroupMembersApiGroupsMembersGet = <ThrowOnError extends boolean = false>(options?: Options<GetGroupMembersApiGroupsMembersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGroupMembersApiGroupsMembersGetResponse, GetGroupMembersApiGroupsMembersGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/members',
        ...options
    });
};

/**
 * Get Group Member
 * Returns a single user belonging to the current group
 */
export const getGroupMemberApiGroupsMembersUsernameOrIdGet = <ThrowOnError extends boolean = false>(options: Options<GetGroupMemberApiGroupsMembersUsernameOrIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetGroupMemberApiGroupsMembersUsernameOrIdGetResponse, GetGroupMemberApiGroupsMembersUsernameOrIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/members/{username_or_id}',
        ...options
    });
};

/**
 * Get Group Preferences
 */
export const getGroupPreferencesApiGroupsPreferencesGet = <ThrowOnError extends boolean = false>(options?: Options<GetGroupPreferencesApiGroupsPreferencesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGroupPreferencesApiGroupsPreferencesGetResponse, GetGroupPreferencesApiGroupsPreferencesGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/preferences',
        ...options
    });
};

/**
 * Update Group Preferences
 */
export const updateGroupPreferencesApiGroupsPreferencesPut = <ThrowOnError extends boolean = false>(options: Options<UpdateGroupPreferencesApiGroupsPreferencesPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateGroupPreferencesApiGroupsPreferencesPutResponse, UpdateGroupPreferencesApiGroupsPreferencesPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/preferences',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Storage
 */
export const getStorageApiGroupsStorageGet = <ThrowOnError extends boolean = false>(options?: Options<GetStorageApiGroupsStorageGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStorageApiGroupsStorageGetResponse, GetStorageApiGroupsStorageGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/storage',
        ...options
    });
};

/**
 * Start Data Migration
 */
export const startDataMigrationApiGroupsMigrationsPost = <ThrowOnError extends boolean = false>(options: Options<StartDataMigrationApiGroupsMigrationsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StartDataMigrationApiGroupsMigrationsPostResponse, StartDataMigrationApiGroupsMigrationsPostError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/migrations',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Get All
 */
export const getAllApiGroupsReportsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiGroupsReportsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiGroupsReportsGetResponse, GetAllApiGroupsReportsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/reports',
        ...options
    });
};

/**
 * Delete One
 */
export const deleteOneApiGroupsReportsItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiGroupsReportsItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteOneApiGroupsReportsItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/reports/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiGroupsReportsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiGroupsReportsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiGroupsReportsItemIdGetResponse, GetOneApiGroupsReportsItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/reports/{item_id}',
        ...options
    });
};

/**
 * Get All
 */
export const getAllApiGroupsLabelsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiGroupsLabelsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiGroupsLabelsGetResponse, GetAllApiGroupsLabelsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/labels',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiGroupsLabelsPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiGroupsLabelsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiGroupsLabelsPostResponse, CreateOneApiGroupsLabelsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/labels',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete One
 */
export const deleteOneApiGroupsLabelsItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiGroupsLabelsItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiGroupsLabelsItemIdDeleteResponse, DeleteOneApiGroupsLabelsItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/labels/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiGroupsLabelsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiGroupsLabelsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiGroupsLabelsItemIdGetResponse, GetOneApiGroupsLabelsItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/labels/{item_id}',
        ...options
    });
};

/**
 * Update One
 */
export const updateOneApiGroupsLabelsItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiGroupsLabelsItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiGroupsLabelsItemIdPutResponse, UpdateOneApiGroupsLabelsItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/labels/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Seed Foods
 */
export const seedFoodsApiGroupsSeedersFoodsPost = <ThrowOnError extends boolean = false>(options: Options<SeedFoodsApiGroupsSeedersFoodsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SeedFoodsApiGroupsSeedersFoodsPostResponse, SeedFoodsApiGroupsSeedersFoodsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/seeders/foods',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Seed Labels
 */
export const seedLabelsApiGroupsSeedersLabelsPost = <ThrowOnError extends boolean = false>(options: Options<SeedLabelsApiGroupsSeedersLabelsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SeedLabelsApiGroupsSeedersLabelsPostResponse, SeedLabelsApiGroupsSeedersLabelsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/seeders/labels',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Seed Units
 */
export const seedUnitsApiGroupsSeedersUnitsPost = <ThrowOnError extends boolean = false>(options: Options<SeedUnitsApiGroupsSeedersUnitsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SeedUnitsApiGroupsSeedersUnitsPostResponse, SeedUnitsApiGroupsSeedersUnitsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/groups/seeders/units',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Recipe Formats And Templates
 */
export const getRecipeFormatsAndTemplatesApiRecipesExportsGet = <ThrowOnError extends boolean = false>(options?: Options<GetRecipeFormatsAndTemplatesApiRecipesExportsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecipeFormatsAndTemplatesApiRecipesExportsGetResponse, GetRecipeFormatsAndTemplatesApiRecipesExportsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/exports',
        ...options
    });
};

/**
 * Get Recipe As Format
 * ## Parameters
 * `template_name`: The name of the template to use to use in the exports listed. Template type will automatically
 * be set on the backend. Because of this, it's important that your templates have unique names. See available
 * names and formats in the /api/recipes/exports endpoint.
 */
export const getRecipeAsFormatApiRecipesSlugExportsGet = <ThrowOnError extends boolean = false>(options: Options<GetRecipeAsFormatApiRecipesSlugExportsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetRecipeAsFormatApiRecipesSlugExportsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/{slug}/exports',
        ...options
    });
};

/**
 * Get Recipe Zip Token
 * Generates a recipe zip token to be used to download a recipe as a zip file
 */
export const getRecipeZipTokenApiRecipesSlugExportsPost = <ThrowOnError extends boolean = false>(options: Options<GetRecipeZipTokenApiRecipesSlugExportsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetRecipeZipTokenApiRecipesSlugExportsPostResponse, GetRecipeZipTokenApiRecipesSlugExportsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/{slug}/exports',
        ...options
    });
};

/**
 * Get Recipe As Zip
 * Get a Recipe and Its Original Image as a Zip File
 */
export const getRecipeAsZipApiRecipesSlugExportsZipGet = <ThrowOnError extends boolean = false>(options: Options<GetRecipeAsZipApiRecipesSlugExportsZipGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetRecipeAsZipApiRecipesSlugExportsZipGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/{slug}/exports/zip',
        ...options
    });
};

/**
 * Test Parse Recipe Url
 */
export const testParseRecipeUrlApiRecipesTestScrapeUrlPost = <ThrowOnError extends boolean = false>(options: Options<TestParseRecipeUrlApiRecipesTestScrapeUrlPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, TestParseRecipeUrlApiRecipesTestScrapeUrlPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/test-scrape-url',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Recipe From Html Or Json
 * Takes in raw HTML or a https://schema.org/Recipe object as a JSON string and parses it like a URL
 */
export const createRecipeFromHtmlOrJsonApiRecipesCreateHtmlOrJsonPost = <ThrowOnError extends boolean = false>(options: Options<CreateRecipeFromHtmlOrJsonApiRecipesCreateHtmlOrJsonPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateRecipeFromHtmlOrJsonApiRecipesCreateHtmlOrJsonPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/create/html-or-json',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Parse Recipe Url
 * Takes in a URL and attempts to scrape data and load it into the database
 */
export const parseRecipeUrlApiRecipesCreateUrlPost = <ThrowOnError extends boolean = false>(options: Options<ParseRecipeUrlApiRecipesCreateUrlPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ParseRecipeUrlApiRecipesCreateUrlPostResponse, ParseRecipeUrlApiRecipesCreateUrlPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/create/url',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Parse Recipe Url Bulk
 * Takes in a URL and attempts to scrape data and load it into the database
 */
export const parseRecipeUrlBulkApiRecipesCreateUrlBulkPost = <ThrowOnError extends boolean = false>(options: Options<ParseRecipeUrlBulkApiRecipesCreateUrlBulkPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, ParseRecipeUrlBulkApiRecipesCreateUrlBulkPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/create/url/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Recipe From Zip
 * Create recipe from archive
 */
export const createRecipeFromZipApiRecipesCreateZipPost = <ThrowOnError extends boolean = false>(options: Options<CreateRecipeFromZipApiRecipesCreateZipPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateRecipeFromZipApiRecipesCreateZipPostError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/create/zip',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Create Recipe From Image
 * Create a recipe from an image using OpenAI.
 * Optionally specify a language for it to translate the recipe to.
 */
export const createRecipeFromImageApiRecipesCreateImagePost = <ThrowOnError extends boolean = false>(options: Options<CreateRecipeFromImageApiRecipesCreateImagePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateRecipeFromImageApiRecipesCreateImagePostError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/create/image',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Get All
 */
export const getAllApiRecipesGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiRecipesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiRecipesGetResponse, GetAllApiRecipesGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes',
        ...options
    });
};

/**
 * Patch Many
 */
export const patchManyApiRecipesPatch = <ThrowOnError extends boolean = false>(options: Options<PatchManyApiRecipesPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, PatchManyApiRecipesPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create One
 * Takes in a JSON string and loads data into the database as a new entry
 */
export const createOneApiRecipesPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiRecipesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiRecipesPostResponse, CreateOneApiRecipesPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update Many
 */
export const updateManyApiRecipesPut = <ThrowOnError extends boolean = false>(options: Options<UpdateManyApiRecipesPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateManyApiRecipesPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Suggest Recipes
 */
export const suggestRecipesApiRecipesSuggestionsGet = <ThrowOnError extends boolean = false>(options?: Options<SuggestRecipesApiRecipesSuggestionsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SuggestRecipesApiRecipesSuggestionsGetResponse, SuggestRecipesApiRecipesSuggestionsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/suggestions',
        ...options
    });
};

/**
 * Delete One
 * Deletes a recipe by slug
 */
export const deleteOneApiRecipesSlugDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiRecipesSlugDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteOneApiRecipesSlugDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/{slug}',
        ...options
    });
};

/**
 * Get One
 * Takes in a recipe's slug or id and returns all data for a recipe
 */
export const getOneApiRecipesSlugGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiRecipesSlugGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiRecipesSlugGetResponse, GetOneApiRecipesSlugGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/{slug}',
        ...options
    });
};

/**
 * Patch One
 * Updates a recipe by existing slug and data.
 */
export const patchOneApiRecipesSlugPatch = <ThrowOnError extends boolean = false>(options: Options<PatchOneApiRecipesSlugPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, PatchOneApiRecipesSlugPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/{slug}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update One
 * Updates a recipe by existing slug and data.
 */
export const updateOneApiRecipesSlugPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiRecipesSlugPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateOneApiRecipesSlugPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/{slug}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Duplicate One
 * Duplicates a recipe with a new custom name if given
 */
export const duplicateOneApiRecipesSlugDuplicatePost = <ThrowOnError extends boolean = false>(options: Options<DuplicateOneApiRecipesSlugDuplicatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DuplicateOneApiRecipesSlugDuplicatePostResponse, DuplicateOneApiRecipesSlugDuplicatePostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/{slug}/duplicate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update Last Made
 * Update a recipe's last made timestamp
 */
export const updateLastMadeApiRecipesSlugLastMadePatch = <ThrowOnError extends boolean = false>(options: Options<UpdateLastMadeApiRecipesSlugLastMadePatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, UpdateLastMadeApiRecipesSlugLastMadePatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/{slug}/last-made',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Scrape Image Url
 */
export const scrapeImageUrlApiRecipesSlugImagePost = <ThrowOnError extends boolean = false>(options: Options<ScrapeImageUrlApiRecipesSlugImagePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, ScrapeImageUrlApiRecipesSlugImagePostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/{slug}/image',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update Recipe Image
 */
export const updateRecipeImageApiRecipesSlugImagePut = <ThrowOnError extends boolean = false>(options: Options<UpdateRecipeImageApiRecipesSlugImagePutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateRecipeImageApiRecipesSlugImagePutResponse, UpdateRecipeImageApiRecipesSlugImagePutError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/{slug}/image',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Upload Recipe Asset
 * Upload a file to store as a recipe asset
 */
export const uploadRecipeAssetApiRecipesSlugAssetsPost = <ThrowOnError extends boolean = false>(options: Options<UploadRecipeAssetApiRecipesSlugAssetsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadRecipeAssetApiRecipesSlugAssetsPostResponse, UploadRecipeAssetApiRecipesSlugAssetsPostError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/{slug}/assets',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Get Recipe Comments
 * Get all comments for a recipe
 */
export const getRecipeCommentsApiRecipesSlugCommentsGet = <ThrowOnError extends boolean = false>(options: Options<GetRecipeCommentsApiRecipesSlugCommentsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRecipeCommentsApiRecipesSlugCommentsGetResponse, GetRecipeCommentsApiRecipesSlugCommentsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/{slug}/comments',
        ...options
    });
};

/**
 * Bulk Tag Recipes
 */
export const bulkTagRecipesApiRecipesBulkActionsTagPost = <ThrowOnError extends boolean = false>(options: Options<BulkTagRecipesApiRecipesBulkActionsTagPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, BulkTagRecipesApiRecipesBulkActionsTagPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/bulk-actions/tag',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Bulk Settings Recipes
 */
export const bulkSettingsRecipesApiRecipesBulkActionsSettingsPost = <ThrowOnError extends boolean = false>(options: Options<BulkSettingsRecipesApiRecipesBulkActionsSettingsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, BulkSettingsRecipesApiRecipesBulkActionsSettingsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/bulk-actions/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Bulk Categorize Recipes
 */
export const bulkCategorizeRecipesApiRecipesBulkActionsCategorizePost = <ThrowOnError extends boolean = false>(options: Options<BulkCategorizeRecipesApiRecipesBulkActionsCategorizePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, BulkCategorizeRecipesApiRecipesBulkActionsCategorizePostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/bulk-actions/categorize',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Bulk Delete Recipes
 */
export const bulkDeleteRecipesApiRecipesBulkActionsDeletePost = <ThrowOnError extends boolean = false>(options: Options<BulkDeleteRecipesApiRecipesBulkActionsDeletePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, BulkDeleteRecipesApiRecipesBulkActionsDeletePostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/bulk-actions/delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Exported Data
 */
export const getExportedDataApiRecipesBulkActionsExportGet = <ThrowOnError extends boolean = false>(options?: Options<GetExportedDataApiRecipesBulkActionsExportGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetExportedDataApiRecipesBulkActionsExportGetResponse, GetExportedDataApiRecipesBulkActionsExportGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/bulk-actions/export',
        ...options
    });
};

/**
 * Bulk Export Recipes
 */
export const bulkExportRecipesApiRecipesBulkActionsExportPost = <ThrowOnError extends boolean = false>(options: Options<BulkExportRecipesApiRecipesBulkActionsExportPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, BulkExportRecipesApiRecipesBulkActionsExportPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/bulk-actions/export',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Exported Data Token
 * Returns a token to download a file
 */
export const getExportedDataTokenApiRecipesBulkActionsExportDownloadGet = <ThrowOnError extends boolean = false>(options: Options<GetExportedDataTokenApiRecipesBulkActionsExportDownloadGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetExportedDataTokenApiRecipesBulkActionsExportDownloadGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/bulk-actions/export/download',
        ...options
    });
};

/**
 * Purge Export Data
 * Remove all exports data, including items on disk without database entry
 */
export const purgeExportDataApiRecipesBulkActionsExportPurgeDelete = <ThrowOnError extends boolean = false>(options?: Options<PurgeExportDataApiRecipesBulkActionsExportPurgeDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<PurgeExportDataApiRecipesBulkActionsExportPurgeDeleteResponse, PurgeExportDataApiRecipesBulkActionsExportPurgeDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/bulk-actions/export/purge',
        ...options
    });
};

/**
 * Get Shared Recipe
 */
export const getSharedRecipeApiRecipesSharedTokenIdGet = <ThrowOnError extends boolean = false>(options: Options<GetSharedRecipeApiRecipesSharedTokenIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSharedRecipeApiRecipesSharedTokenIdGetResponse, GetSharedRecipeApiRecipesSharedTokenIdGetError, ThrowOnError>({
        url: '/api/recipes/shared/{token_id}',
        ...options
    });
};

/**
 * Get All
 */
export const getAllApiRecipesTimelineEventsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiRecipesTimelineEventsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiRecipesTimelineEventsGetResponse, GetAllApiRecipesTimelineEventsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/timeline/events',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiRecipesTimelineEventsPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiRecipesTimelineEventsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiRecipesTimelineEventsPostResponse, CreateOneApiRecipesTimelineEventsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/timeline/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete One
 */
export const deleteOneApiRecipesTimelineEventsItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiRecipesTimelineEventsItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiRecipesTimelineEventsItemIdDeleteResponse, DeleteOneApiRecipesTimelineEventsItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/timeline/events/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiRecipesTimelineEventsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiRecipesTimelineEventsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiRecipesTimelineEventsItemIdGetResponse, GetOneApiRecipesTimelineEventsItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/timeline/events/{item_id}',
        ...options
    });
};

/**
 * Update One
 */
export const updateOneApiRecipesTimelineEventsItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiRecipesTimelineEventsItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiRecipesTimelineEventsItemIdPutResponse, UpdateOneApiRecipesTimelineEventsItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/timeline/events/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update Event Image
 */
export const updateEventImageApiRecipesTimelineEventsItemIdImagePut = <ThrowOnError extends boolean = false>(options: Options<UpdateEventImageApiRecipesTimelineEventsItemIdImagePutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateEventImageApiRecipesTimelineEventsItemIdImagePutResponse, UpdateEventImageApiRecipesTimelineEventsItemIdImagePutError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recipes/timeline/events/{item_id}/image',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Get All
 * Returns a list of available categories in the database
 */
export const getAllApiOrganizersCategoriesGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiOrganizersCategoriesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiOrganizersCategoriesGetResponse, GetAllApiOrganizersCategoriesGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/categories',
        ...options
    });
};

/**
 * Create One
 * Creates a Category in the database
 */
export const createOneApiOrganizersCategoriesPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiOrganizersCategoriesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateOneApiOrganizersCategoriesPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get All Empty
 * Returns a list of categories that do not contain any recipes
 */
export const getAllEmptyApiOrganizersCategoriesEmptyGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllEmptyApiOrganizersCategoriesEmptyGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllEmptyApiOrganizersCategoriesEmptyGetResponse, GetAllEmptyApiOrganizersCategoriesEmptyGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/categories/empty',
        ...options
    });
};

/**
 * Delete One
 * Removes a recipe category from the database. Deleting a
 * category does not impact a recipe. The category will be removed
 * from any recipes that contain it
 */
export const deleteOneApiOrganizersCategoriesItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiOrganizersCategoriesItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteOneApiOrganizersCategoriesItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/categories/{item_id}',
        ...options
    });
};

/**
 * Get One
 * Returns a list of recipes associated with the provided category.
 */
export const getOneApiOrganizersCategoriesItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiOrganizersCategoriesItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiOrganizersCategoriesItemIdGetResponse, GetOneApiOrganizersCategoriesItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/categories/{item_id}',
        ...options
    });
};

/**
 * Update One
 * Updates an existing Tag in the database
 */
export const updateOneApiOrganizersCategoriesItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiOrganizersCategoriesItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiOrganizersCategoriesItemIdPutResponse, UpdateOneApiOrganizersCategoriesItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/categories/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get One By Slug
 * Returns a category object with the associated recieps relating to the category
 */
export const getOneBySlugApiOrganizersCategoriesSlugCategorySlugGet = <ThrowOnError extends boolean = false>(options: Options<GetOneBySlugApiOrganizersCategoriesSlugCategorySlugGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetOneBySlugApiOrganizersCategoriesSlugCategorySlugGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/categories/slug/{category_slug}',
        ...options
    });
};

/**
 * Get All
 * Returns a list of available tags in the database
 */
export const getAllApiOrganizersTagsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiOrganizersTagsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiOrganizersTagsGetResponse, GetAllApiOrganizersTagsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/tags',
        ...options
    });
};

/**
 * Create One
 * Creates a Tag in the database
 */
export const createOneApiOrganizersTagsPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiOrganizersTagsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateOneApiOrganizersTagsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Empty Tags
 * Returns a list of tags that do not contain any recipes
 */
export const getEmptyTagsApiOrganizersTagsEmptyGet = <ThrowOnError extends boolean = false>(options?: Options<GetEmptyTagsApiOrganizersTagsEmptyGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, GetEmptyTagsApiOrganizersTagsEmptyGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/tags/empty',
        ...options
    });
};

/**
 * Delete Recipe Tag
 * Removes a recipe tag from the database. Deleting a
 * tag does not impact a recipe. The tag will be removed
 * from any recipes that contain it
 */
export const deleteRecipeTagApiOrganizersTagsItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteRecipeTagApiOrganizersTagsItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteRecipeTagApiOrganizersTagsItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/tags/{item_id}',
        ...options
    });
};

/**
 * Get One
 * Returns a list of recipes associated with the provided tag.
 */
export const getOneApiOrganizersTagsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiOrganizersTagsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiOrganizersTagsItemIdGetResponse, GetOneApiOrganizersTagsItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/tags/{item_id}',
        ...options
    });
};

/**
 * Update One
 * Updates an existing Tag in the database
 */
export const updateOneApiOrganizersTagsItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiOrganizersTagsItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiOrganizersTagsItemIdPutResponse, UpdateOneApiOrganizersTagsItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/tags/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get One By Slug
 */
export const getOneBySlugApiOrganizersTagsSlugTagSlugGet = <ThrowOnError extends boolean = false>(options: Options<GetOneBySlugApiOrganizersTagsSlugTagSlugGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneBySlugApiOrganizersTagsSlugTagSlugGetResponse, GetOneBySlugApiOrganizersTagsSlugTagSlugGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/tags/slug/{tag_slug}',
        ...options
    });
};

/**
 * Get All
 */
export const getAllApiOrganizersToolsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiOrganizersToolsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiOrganizersToolsGetResponse, GetAllApiOrganizersToolsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/tools',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiOrganizersToolsPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiOrganizersToolsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiOrganizersToolsPostResponse, CreateOneApiOrganizersToolsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/tools',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete One
 */
export const deleteOneApiOrganizersToolsItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiOrganizersToolsItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiOrganizersToolsItemIdDeleteResponse, DeleteOneApiOrganizersToolsItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/tools/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiOrganizersToolsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiOrganizersToolsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiOrganizersToolsItemIdGetResponse, GetOneApiOrganizersToolsItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/tools/{item_id}',
        ...options
    });
};

/**
 * Update One
 */
export const updateOneApiOrganizersToolsItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiOrganizersToolsItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiOrganizersToolsItemIdPutResponse, UpdateOneApiOrganizersToolsItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/tools/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get One By Slug
 */
export const getOneBySlugApiOrganizersToolsSlugToolSlugGet = <ThrowOnError extends boolean = false>(options: Options<GetOneBySlugApiOrganizersToolsSlugToolSlugGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneBySlugApiOrganizersToolsSlugToolSlugGetResponse, GetOneBySlugApiOrganizersToolsSlugToolSlugGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organizers/tools/slug/{tool_slug}',
        ...options
    });
};

/**
 * Get All
 */
export const getAllApiSharedRecipesGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiSharedRecipesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiSharedRecipesGetResponse, GetAllApiSharedRecipesGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/shared/recipes',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiSharedRecipesPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiSharedRecipesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiSharedRecipesPostResponse, CreateOneApiSharedRecipesPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/shared/recipes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete One
 */
export const deleteOneApiSharedRecipesItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiSharedRecipesItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteOneApiSharedRecipesItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/shared/recipes/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiSharedRecipesItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiSharedRecipesItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiSharedRecipesItemIdGetResponse, GetOneApiSharedRecipesItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/shared/recipes/{item_id}',
        ...options
    });
};

/**
 * Get All
 */
export const getAllApiCommentsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiCommentsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiCommentsGetResponse, GetAllApiCommentsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/comments',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiCommentsPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiCommentsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiCommentsPostResponse, CreateOneApiCommentsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/comments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete One
 */
export const deleteOneApiCommentsItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiCommentsItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiCommentsItemIdDeleteResponse, DeleteOneApiCommentsItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/comments/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiCommentsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiCommentsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiCommentsItemIdGetResponse, GetOneApiCommentsItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/comments/{item_id}',
        ...options
    });
};

/**
 * Update One
 */
export const updateOneApiCommentsItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiCommentsItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiCommentsItemIdPutResponse, UpdateOneApiCommentsItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/comments/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Parse Ingredient
 */
export const parseIngredientApiParserIngredientPost = <ThrowOnError extends boolean = false>(options: Options<ParseIngredientApiParserIngredientPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ParseIngredientApiParserIngredientPostResponse, ParseIngredientApiParserIngredientPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/parser/ingredient',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Parse Ingredients
 */
export const parseIngredientsApiParserIngredientsPost = <ThrowOnError extends boolean = false>(options: Options<ParseIngredientsApiParserIngredientsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ParseIngredientsApiParserIngredientsPostResponse, ParseIngredientsApiParserIngredientsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/parser/ingredients',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get All
 */
export const getAllApiFoodsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiFoodsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiFoodsGetResponse, GetAllApiFoodsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/foods',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiFoodsPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiFoodsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiFoodsPostResponse, CreateOneApiFoodsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/foods',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Merge One
 */
export const mergeOneApiFoodsMergePut = <ThrowOnError extends boolean = false>(options: Options<MergeOneApiFoodsMergePutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MergeOneApiFoodsMergePutResponse, MergeOneApiFoodsMergePutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/foods/merge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete One
 */
export const deleteOneApiFoodsItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiFoodsItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiFoodsItemIdDeleteResponse, DeleteOneApiFoodsItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/foods/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiFoodsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiFoodsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiFoodsItemIdGetResponse, GetOneApiFoodsItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/foods/{item_id}',
        ...options
    });
};

/**
 * Update One
 */
export const updateOneApiFoodsItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiFoodsItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiFoodsItemIdPutResponse, UpdateOneApiFoodsItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/foods/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get All
 */
export const getAllApiUnitsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiUnitsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiUnitsGetResponse, GetAllApiUnitsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/units',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiUnitsPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiUnitsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiUnitsPostResponse, CreateOneApiUnitsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/units',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Merge One
 */
export const mergeOneApiUnitsMergePut = <ThrowOnError extends boolean = false>(options: Options<MergeOneApiUnitsMergePutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MergeOneApiUnitsMergePutResponse, MergeOneApiUnitsMergePutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/units/merge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete One
 */
export const deleteOneApiUnitsItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiUnitsItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiUnitsItemIdDeleteResponse, DeleteOneApiUnitsItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/units/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiUnitsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiUnitsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiUnitsItemIdGetResponse, GetOneApiUnitsItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/units/{item_id}',
        ...options
    });
};

/**
 * Update One
 */
export const updateOneApiUnitsItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiUnitsItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiUnitsItemIdPutResponse, UpdateOneApiUnitsItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/units/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get App Info
 * Get general application information
 */
export const getAppInfoApiAdminAboutGet = <ThrowOnError extends boolean = false>(options?: Options<GetAppInfoApiAdminAboutGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAppInfoApiAdminAboutGetResponse, GetAppInfoApiAdminAboutGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/about',
        ...options
    });
};

/**
 * Get App Statistics
 */
export const getAppStatisticsApiAdminAboutStatisticsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAppStatisticsApiAdminAboutStatisticsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAppStatisticsApiAdminAboutStatisticsGetResponse, GetAppStatisticsApiAdminAboutStatisticsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/about/statistics',
        ...options
    });
};

/**
 * Check App Config
 */
export const checkAppConfigApiAdminAboutCheckGet = <ThrowOnError extends boolean = false>(options?: Options<CheckAppConfigApiAdminAboutCheckGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CheckAppConfigApiAdminAboutCheckGetResponse, CheckAppConfigApiAdminAboutCheckGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/about/check',
        ...options
    });
};

/**
 * Get All
 */
export const getAllApiAdminUsersGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiAdminUsersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiAdminUsersGetResponse, GetAllApiAdminUsersGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/users',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiAdminUsersPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiAdminUsersPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiAdminUsersPostResponse, CreateOneApiAdminUsersPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unlock Users
 */
export const unlockUsersApiAdminUsersUnlockPost = <ThrowOnError extends boolean = false>(options?: Options<UnlockUsersApiAdminUsersUnlockPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UnlockUsersApiAdminUsersUnlockPostResponse, UnlockUsersApiAdminUsersUnlockPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/users/unlock',
        ...options
    });
};

/**
 * Delete One
 */
export const deleteOneApiAdminUsersItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiAdminUsersItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiAdminUsersItemIdDeleteResponse, DeleteOneApiAdminUsersItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/users/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiAdminUsersItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiAdminUsersItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiAdminUsersItemIdGetResponse, GetOneApiAdminUsersItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/users/{item_id}',
        ...options
    });
};

/**
 * Update One
 */
export const updateOneApiAdminUsersItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiAdminUsersItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiAdminUsersItemIdPutResponse, UpdateOneApiAdminUsersItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/users/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate Token
 * Generates a reset token and returns it. This is an authenticated endpoint
 */
export const generateTokenApiAdminUsersPasswordResetTokenPost = <ThrowOnError extends boolean = false>(options: Options<GenerateTokenApiAdminUsersPasswordResetTokenPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GenerateTokenApiAdminUsersPasswordResetTokenPostResponse, GenerateTokenApiAdminUsersPasswordResetTokenPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/users/password-reset-token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get All
 */
export const getAllApiAdminHouseholdsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiAdminHouseholdsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiAdminHouseholdsGetResponse, GetAllApiAdminHouseholdsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/households',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiAdminHouseholdsPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiAdminHouseholdsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiAdminHouseholdsPostResponse, CreateOneApiAdminHouseholdsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/households',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete One
 */
export const deleteOneApiAdminHouseholdsItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiAdminHouseholdsItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiAdminHouseholdsItemIdDeleteResponse, DeleteOneApiAdminHouseholdsItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/households/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiAdminHouseholdsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiAdminHouseholdsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiAdminHouseholdsItemIdGetResponse, GetOneApiAdminHouseholdsItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/households/{item_id}',
        ...options
    });
};

/**
 * Update One
 */
export const updateOneApiAdminHouseholdsItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiAdminHouseholdsItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiAdminHouseholdsItemIdPutResponse, UpdateOneApiAdminHouseholdsItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/households/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get All
 */
export const getAllApiAdminGroupsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiAdminGroupsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiAdminGroupsGetResponse, GetAllApiAdminGroupsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/groups',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiAdminGroupsPost = <ThrowOnError extends boolean = false>(options: Options<CreateOneApiAdminGroupsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneApiAdminGroupsPostResponse, CreateOneApiAdminGroupsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete One
 */
export const deleteOneApiAdminGroupsItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiAdminGroupsItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiAdminGroupsItemIdDeleteResponse, DeleteOneApiAdminGroupsItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/groups/{item_id}',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiAdminGroupsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiAdminGroupsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiAdminGroupsItemIdGetResponse, GetOneApiAdminGroupsItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/groups/{item_id}',
        ...options
    });
};

/**
 * Update One
 */
export const updateOneApiAdminGroupsItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOneApiAdminGroupsItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOneApiAdminGroupsItemIdPutResponse, UpdateOneApiAdminGroupsItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/groups/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Check Email Config
 * Get general application information
 */
export const checkEmailConfigApiAdminEmailGet = <ThrowOnError extends boolean = false>(options?: Options<CheckEmailConfigApiAdminEmailGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CheckEmailConfigApiAdminEmailGetResponse, CheckEmailConfigApiAdminEmailGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/email',
        ...options
    });
};

/**
 * Send Test Email
 */
export const sendTestEmailApiAdminEmailPost = <ThrowOnError extends boolean = false>(options: Options<SendTestEmailApiAdminEmailPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendTestEmailApiAdminEmailPostResponse, SendTestEmailApiAdminEmailPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get All
 */
export const getAllApiAdminBackupsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllApiAdminBackupsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllApiAdminBackupsGetResponse, GetAllApiAdminBackupsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/backups',
        ...options
    });
};

/**
 * Create One
 */
export const createOneApiAdminBackupsPost = <ThrowOnError extends boolean = false>(options?: Options<CreateOneApiAdminBackupsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateOneApiAdminBackupsPostResponse, CreateOneApiAdminBackupsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/backups',
        ...options
    });
};

/**
 * Delete One
 */
export const deleteOneApiAdminBackupsFileNameDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOneApiAdminBackupsFileNameDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOneApiAdminBackupsFileNameDeleteResponse, DeleteOneApiAdminBackupsFileNameDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/backups/{file_name}',
        ...options
    });
};

/**
 * Get One
 * Returns a token to download a file
 */
export const getOneApiAdminBackupsFileNameGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiAdminBackupsFileNameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiAdminBackupsFileNameGetResponse, GetOneApiAdminBackupsFileNameGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/backups/{file_name}',
        ...options
    });
};

/**
 * Upload One
 * Upload a .zip File to later be imported into Mealie
 */
export const uploadOneApiAdminBackupsUploadPost = <ThrowOnError extends boolean = false>(options: Options<UploadOneApiAdminBackupsUploadPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadOneApiAdminBackupsUploadPostResponse, UploadOneApiAdminBackupsUploadPostError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/backups/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Import One
 */
export const importOneApiAdminBackupsFileNameRestorePost = <ThrowOnError extends boolean = false>(options: Options<ImportOneApiAdminBackupsFileNameRestorePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ImportOneApiAdminBackupsFileNameRestorePostResponse, ImportOneApiAdminBackupsFileNameRestorePostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/backups/{file_name}/restore',
        ...options
    });
};

/**
 * Get Maintenance Summary
 * Get the maintenance summary
 */
export const getMaintenanceSummaryApiAdminMaintenanceGet = <ThrowOnError extends boolean = false>(options?: Options<GetMaintenanceSummaryApiAdminMaintenanceGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMaintenanceSummaryApiAdminMaintenanceGetResponse, GetMaintenanceSummaryApiAdminMaintenanceGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/maintenance',
        ...options
    });
};

/**
 * Get Storage Details
 */
export const getStorageDetailsApiAdminMaintenanceStorageGet = <ThrowOnError extends boolean = false>(options?: Options<GetStorageDetailsApiAdminMaintenanceStorageGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStorageDetailsApiAdminMaintenanceStorageGetResponse, GetStorageDetailsApiAdminMaintenanceStorageGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/maintenance/storage',
        ...options
    });
};

/**
 * Clean Images
 * Purges all the images from the filesystem that aren't .webp
 */
export const cleanImagesApiAdminMaintenanceCleanImagesPost = <ThrowOnError extends boolean = false>(options?: Options<CleanImagesApiAdminMaintenanceCleanImagesPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CleanImagesApiAdminMaintenanceCleanImagesPostResponse, CleanImagesApiAdminMaintenanceCleanImagesPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/maintenance/clean/images',
        ...options
    });
};

/**
 * Clean Temp
 */
export const cleanTempApiAdminMaintenanceCleanTempPost = <ThrowOnError extends boolean = false>(options?: Options<CleanTempApiAdminMaintenanceCleanTempPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CleanTempApiAdminMaintenanceCleanTempPostResponse, CleanTempApiAdminMaintenanceCleanTempPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/maintenance/clean/temp',
        ...options
    });
};

/**
 * Clean Recipe Folders
 * Deletes all the recipe folders that don't have names that are valid UUIDs
 */
export const cleanRecipeFoldersApiAdminMaintenanceCleanRecipeFoldersPost = <ThrowOnError extends boolean = false>(options?: Options<CleanRecipeFoldersApiAdminMaintenanceCleanRecipeFoldersPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CleanRecipeFoldersApiAdminMaintenanceCleanRecipeFoldersPostResponse, CleanRecipeFoldersApiAdminMaintenanceCleanRecipeFoldersPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/maintenance/clean/recipe-folders',
        ...options
    });
};

/**
 * Debug Openai
 */
export const debugOpenaiApiAdminDebugOpenaiPost = <ThrowOnError extends boolean = false>(options?: Options<DebugOpenaiApiAdminDebugOpenaiPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<DebugOpenaiApiAdminDebugOpenaiPostResponse, DebugOpenaiApiAdminDebugOpenaiPostError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/debug/openai',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Get All
 */
export const getAllApiExploreGroupsGroupSlugFoodsGet = <ThrowOnError extends boolean = false>(options: Options<GetAllApiExploreGroupsGroupSlugFoodsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllApiExploreGroupsGroupSlugFoodsGetResponse, GetAllApiExploreGroupsGroupSlugFoodsGetError, ThrowOnError>({
        url: '/api/explore/groups/{group_slug}/foods',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiExploreGroupsGroupSlugFoodsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiExploreGroupsGroupSlugFoodsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiExploreGroupsGroupSlugFoodsItemIdGetResponse, GetOneApiExploreGroupsGroupSlugFoodsItemIdGetError, ThrowOnError>({
        url: '/api/explore/groups/{group_slug}/foods/{item_id}',
        ...options
    });
};

/**
 * Get All
 */
export const getAllApiExploreGroupsGroupSlugHouseholdsGet = <ThrowOnError extends boolean = false>(options: Options<GetAllApiExploreGroupsGroupSlugHouseholdsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllApiExploreGroupsGroupSlugHouseholdsGetResponse, GetAllApiExploreGroupsGroupSlugHouseholdsGetError, ThrowOnError>({
        url: '/api/explore/groups/{group_slug}/households',
        ...options
    });
};

/**
 * Get Household
 */
export const getHouseholdApiExploreGroupsGroupSlugHouseholdsHouseholdSlugGet = <ThrowOnError extends boolean = false>(options: Options<GetHouseholdApiExploreGroupsGroupSlugHouseholdsHouseholdSlugGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetHouseholdApiExploreGroupsGroupSlugHouseholdsHouseholdSlugGetResponse, GetHouseholdApiExploreGroupsGroupSlugHouseholdsHouseholdSlugGetError, ThrowOnError>({
        url: '/api/explore/groups/{group_slug}/households/{household_slug}',
        ...options
    });
};

/**
 * Get All
 */
export const getAllApiExploreGroupsGroupSlugOrganizersCategoriesGet = <ThrowOnError extends boolean = false>(options: Options<GetAllApiExploreGroupsGroupSlugOrganizersCategoriesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllApiExploreGroupsGroupSlugOrganizersCategoriesGetResponse, GetAllApiExploreGroupsGroupSlugOrganizersCategoriesGetError, ThrowOnError>({
        url: '/api/explore/groups/{group_slug}/organizers/categories',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiExploreGroupsGroupSlugOrganizersCategoriesItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiExploreGroupsGroupSlugOrganizersCategoriesItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiExploreGroupsGroupSlugOrganizersCategoriesItemIdGetResponse, GetOneApiExploreGroupsGroupSlugOrganizersCategoriesItemIdGetError, ThrowOnError>({
        url: '/api/explore/groups/{group_slug}/organizers/categories/{item_id}',
        ...options
    });
};

/**
 * Get All
 */
export const getAllApiExploreGroupsGroupSlugOrganizersTagsGet = <ThrowOnError extends boolean = false>(options: Options<GetAllApiExploreGroupsGroupSlugOrganizersTagsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllApiExploreGroupsGroupSlugOrganizersTagsGetResponse, GetAllApiExploreGroupsGroupSlugOrganizersTagsGetError, ThrowOnError>({
        url: '/api/explore/groups/{group_slug}/organizers/tags',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiExploreGroupsGroupSlugOrganizersTagsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiExploreGroupsGroupSlugOrganizersTagsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiExploreGroupsGroupSlugOrganizersTagsItemIdGetResponse, GetOneApiExploreGroupsGroupSlugOrganizersTagsItemIdGetError, ThrowOnError>({
        url: '/api/explore/groups/{group_slug}/organizers/tags/{item_id}',
        ...options
    });
};

/**
 * Get All
 */
export const getAllApiExploreGroupsGroupSlugOrganizersToolsGet = <ThrowOnError extends boolean = false>(options: Options<GetAllApiExploreGroupsGroupSlugOrganizersToolsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllApiExploreGroupsGroupSlugOrganizersToolsGetResponse, GetAllApiExploreGroupsGroupSlugOrganizersToolsGetError, ThrowOnError>({
        url: '/api/explore/groups/{group_slug}/organizers/tools',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiExploreGroupsGroupSlugOrganizersToolsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiExploreGroupsGroupSlugOrganizersToolsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiExploreGroupsGroupSlugOrganizersToolsItemIdGetResponse, GetOneApiExploreGroupsGroupSlugOrganizersToolsItemIdGetError, ThrowOnError>({
        url: '/api/explore/groups/{group_slug}/organizers/tools/{item_id}',
        ...options
    });
};

/**
 * Get All
 */
export const getAllApiExploreGroupsGroupSlugCookbooksGet = <ThrowOnError extends boolean = false>(options: Options<GetAllApiExploreGroupsGroupSlugCookbooksGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllApiExploreGroupsGroupSlugCookbooksGetResponse, GetAllApiExploreGroupsGroupSlugCookbooksGetError, ThrowOnError>({
        url: '/api/explore/groups/{group_slug}/cookbooks',
        ...options
    });
};

/**
 * Get One
 */
export const getOneApiExploreGroupsGroupSlugCookbooksItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneApiExploreGroupsGroupSlugCookbooksItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneApiExploreGroupsGroupSlugCookbooksItemIdGetResponse, GetOneApiExploreGroupsGroupSlugCookbooksItemIdGetError, ThrowOnError>({
        url: '/api/explore/groups/{group_slug}/cookbooks/{item_id}',
        ...options
    });
};

/**
 * Get All
 */
export const getAllApiExploreGroupsGroupSlugRecipesGet = <ThrowOnError extends boolean = false>(options: Options<GetAllApiExploreGroupsGroupSlugRecipesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllApiExploreGroupsGroupSlugRecipesGetResponse, GetAllApiExploreGroupsGroupSlugRecipesGetError, ThrowOnError>({
        url: '/api/explore/groups/{group_slug}/recipes',
        ...options
    });
};

/**
 * Suggest Recipes
 */
export const suggestRecipesApiExploreGroupsGroupSlugRecipesSuggestionsGet = <ThrowOnError extends boolean = false>(options: Options<SuggestRecipesApiExploreGroupsGroupSlugRecipesSuggestionsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuggestRecipesApiExploreGroupsGroupSlugRecipesSuggestionsGetResponse, SuggestRecipesApiExploreGroupsGroupSlugRecipesSuggestionsGetError, ThrowOnError>({
        url: '/api/explore/groups/{group_slug}/recipes/suggestions',
        ...options
    });
};

/**
 * Get Recipe
 */
export const getRecipeApiExploreGroupsGroupSlugRecipesRecipeSlugGet = <ThrowOnError extends boolean = false>(options: Options<GetRecipeApiExploreGroupsGroupSlugRecipesRecipeSlugGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRecipeApiExploreGroupsGroupSlugRecipesRecipeSlugGetResponse, GetRecipeApiExploreGroupsGroupSlugRecipesRecipeSlugGetError, ThrowOnError>({
        url: '/api/explore/groups/{group_slug}/recipes/{recipe_slug}',
        ...options
    });
};

/**
 * Get Recipe Img
 * Takes in a recipe id, returns the static image. This route is proxied in the docker image
 * and should not hit the API in production
 */
export const getRecipeImgApiMediaRecipesRecipeIdImagesFileNameGet = <ThrowOnError extends boolean = false>(options: Options<GetRecipeImgApiMediaRecipesRecipeIdImagesFileNameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetRecipeImgApiMediaRecipesRecipeIdImagesFileNameGetError, ThrowOnError>({
        url: '/api/media/recipes/{recipe_id}/images/{file_name}',
        ...options
    });
};

/**
 * Get Recipe Timeline Event Img
 * Takes in a recipe id and event timeline id, returns the static image. This route is proxied in the docker image
 * and should not hit the API in production
 */
export const getRecipeTimelineEventImgApiMediaRecipesRecipeIdImagesTimelineTimelineEventIdFileNameGet = <ThrowOnError extends boolean = false>(options: Options<GetRecipeTimelineEventImgApiMediaRecipesRecipeIdImagesTimelineTimelineEventIdFileNameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetRecipeTimelineEventImgApiMediaRecipesRecipeIdImagesTimelineTimelineEventIdFileNameGetError, ThrowOnError>({
        url: '/api/media/recipes/{recipe_id}/images/timeline/{timeline_event_id}/{file_name}',
        ...options
    });
};

/**
 * Get Recipe Asset
 * Returns a recipe asset
 */
export const getRecipeAssetApiMediaRecipesRecipeIdAssetsFileNameGet = <ThrowOnError extends boolean = false>(options: Options<GetRecipeAssetApiMediaRecipesRecipeIdAssetsFileNameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetRecipeAssetApiMediaRecipesRecipeIdAssetsFileNameGetError, ThrowOnError>({
        url: '/api/media/recipes/{recipe_id}/assets/{file_name}',
        ...options
    });
};

/**
 * Get User Image
 * Takes in a recipe slug, returns the static image. This route is proxied in the docker image
 * and should not hit the API in production
 */
export const getUserImageApiMediaUsersUserIdFileNameGet = <ThrowOnError extends boolean = false>(options: Options<GetUserImageApiMediaUsersUserIdFileNameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetUserImageApiMediaUsersUserIdFileNameGetError, ThrowOnError>({
        url: '/api/media/users/{user_id}/{file_name}',
        ...options
    });
};

/**
 * Get Validation Text
 */
export const getValidationTextApiMediaDockerValidateTxtGet = <ThrowOnError extends boolean = false>(options?: Options<GetValidationTextApiMediaDockerValidateTxtGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/media/docker/validate.txt',
        ...options
    });
};

/**
 * Download File
 * Uses a file token obtained by an active user to retrieve a file from the operating
 * system.
 */
export const downloadFileApiUtilsDownloadGet = <ThrowOnError extends boolean = false>(options?: Options<DownloadFileApiUtilsDownloadGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, DownloadFileApiUtilsDownloadGetError, ThrowOnError>({
        url: '/api/utils/download',
        ...options
    });
};